// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/base.h"

WINRT_WARNING_PUSH

static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180227.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Graphics.DirectX.Direct3D11.2.h"
#include "winrt/impl/Windows.Media.SpeechRecognition.2.h"
#include "winrt/impl/Windows.Storage.2.h"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/Microsoft.Holographic.AppRemoting.2.h"

namespace winrt::impl {

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProvider<D>::GetToken(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProvider)->GetToken(get_abi(callback)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProviderCallback<D>::TokenReceived(param::hstring const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback)->TokenReceived(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationProviderCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiver<D>::ValidateToken(param::hstring const& token, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiver)->ValidateToken(get_abi(token), get_abi(callback)));
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiver<D>::GetRealm() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiver)->GetRealm(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiverCallback<D>::ValidationCompleted(param::hstring const& token, bool isValid) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback)->ValidationCompleted(get_abi(token), isValid));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IAuthenticationReceiverCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback)->Cancel());
}

template <typename D> com_array<uint8_t> consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetCertificatePfx() const
{
    com_array<uint8_t> result;
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetCertificatePfx(impl::put_size_abi(result), put_abi(result)));
    return result;
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetSubjectName() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetSubjectName(put_abi(result)));
    return result;
}

template <typename D> hstring consume_Microsoft_Holographic_AppRemoting_ICertificate<D>::GetPfxPassword() const
{
    hstring result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificate)->GetPfxPassword(put_abi(result)));
    return result;
}

template <typename D> com_array<uint8_t> consume_Microsoft_Holographic_AppRemoting_ICertificateChain<D>::GetCertificate(uint32_t index) const
{
    com_array<uint8_t> result;
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateChain)->GetCertificate(index, impl::put_size_abi(result), put_abi(result)));
    return result;
}

template <typename D> uint32_t consume_Microsoft_Holographic_AppRemoting_ICertificateChain<D>::Length() const
{
    uint32_t result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateChain)->get_Length(&result));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProvider<D>::GetCertificate(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProvider)->GetCertificate(get_abi(callback)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProviderCallback<D>::CertificateReceived(Microsoft::Holographic::AppRemoting::ICertificate const& certificate) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback)->CertificateReceived(get_abi(certificate)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateProviderCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateProviderCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidationCallback<D>::CertificateValidated(Microsoft::Holographic::AppRemoting::CertificateValidationResult const& result) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidationCallback)->CertificateValidated(get_abi(result)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidationCallback<D>::Cancel() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidationCallback)->Cancel());
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_ICertificateValidator<D>::ValidateCertificate(Microsoft::Holographic::AppRemoting::ICertificateChain const& certificateChain, param::hstring const& serverName, bool forceRevocationCheck, optional<Microsoft::Holographic::AppRemoting::CertificateValidationResult> const& systemValidationResult, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback const& callback) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidator)->ValidateCertificate(get_abi(certificateChain), get_abi(serverName), forceRevocationCheck, get_abi(systemValidationResult), get_abi(callback)));
}

template <typename D> bool consume_Microsoft_Holographic_AppRemoting_ICertificateValidator<D>::PerformSystemValidation() const
{
    bool result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::ICertificateValidator)->get_PerformSystemValidation(&result));
    return result;
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->add_OnDataReceived(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IDataChannel> consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(auto_revoke_t, Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IDataChannel>(this, &abi_t<Microsoft::Holographic::AppRemoting::IDataChannel>::remove_OnDataReceived, OnDataReceived(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnDataReceived(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->remove_OnDataReceived(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::SendData(array_view<uint8_t const> data, bool guaranteedDelivery) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->SendData(data.size(), get_abi(data), guaranteedDelivery));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::Close() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->Close());
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->add_OnClosed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IDataChannel> consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(auto_revoke_t, Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IDataChannel>(this, &abi_t<Microsoft::Holographic::AppRemoting::IDataChannel>::remove_OnClosed, OnClosed(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IDataChannel<D>::OnClosed(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IDataChannel)->remove_OnClosed(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Connect(param::hstring const& hostname, uint16_t port) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Connect(get_abi(hostname), port));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ConnectSecure(param::hstring const& hostname, uint16_t port, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const& authProvider, Microsoft::Holographic::AppRemoting::ICertificateValidator const& certValidator) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->ConnectSecure(get_abi(hostname), port, get_abi(authProvider), get_abi(certValidator)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Listen(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Listen(get_abi(localHostname), handshakePort, primaryTransportPort));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ListenSecure(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, Microsoft::Holographic::AppRemoting::ICertificateProvider const& provider, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const& receiver) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->ListenSecure(get_abi(localHostname), handshakePort, primaryTransportPort, get_abi(provider), get_abi(receiver)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::Disconnect() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->Disconnect());
}

template <typename D> Microsoft::Holographic::AppRemoting::ConnectionState consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::ConnectionState() const
{
    Microsoft::Holographic::AppRemoting::ConnectionState result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->get_ConnectionState(put_abi(result)));
    return result;
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnConnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IPlayerContext> consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IPlayerContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IPlayerContext>::remove_OnConnected, OnConnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnConnected(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnConnected(get_abi(token)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnDisconnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IPlayerContext> consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IPlayerContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IPlayerContext>::remove_OnDisconnected, OnDisconnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDisconnected(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnDisconnected(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::CameraPoseMode consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::PoseMode() const
{
    Microsoft::Holographic::AppRemoting::CameraPoseMode result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->get_PoseMode(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::PoseMode(Microsoft::Holographic::AppRemoting::CameraPoseMode const& value) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->put_PoseMode(get_abi(value)));
}

template <typename D> Microsoft::Holographic::AppRemoting::BlitResult consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::BlitRemoteFrame() const
{
    Microsoft::Holographic::AppRemoting::BlitResult result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->BlitRemoteFrame(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority const& priority) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->CreateDataChannel(channelId, get_abi(priority)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->add_OnDataChannelCreated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IPlayerContext> consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IPlayerContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IPlayerContext>::remove_OnDataChannelCreated, OnDataChannelCreated(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::OnDataChannelCreated(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->remove_OnDataChannelCreated(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::PlayerFrameStatistics consume_Microsoft_Holographic_AppRemoting_IPlayerContext<D>::LastFrameStatistics() const
{
    Microsoft::Holographic::AppRemoting::PlayerFrameStatistics result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContext)->get_LastFrameStatistics(put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::PlayerContext consume_Microsoft_Holographic_AppRemoting_IPlayerContextStatics<D>::Create() const
{
    Microsoft::Holographic::AppRemoting::PlayerContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IPlayerContextStatics)->Create(put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Connect(param::hstring const& hostname, uint16_t port) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Connect(get_abi(hostname), port));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ConnectSecure(param::hstring const& hostname, uint16_t port, Microsoft::Holographic::AppRemoting::IAuthenticationProvider const& authProvider, Microsoft::Holographic::AppRemoting::ICertificateValidator const& certValidator) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->ConnectSecure(get_abi(hostname), port, get_abi(authProvider), get_abi(certValidator)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Listen(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Listen(get_abi(localHostname), handshakePort, primaryTransportPort));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ListenSecure(param::hstring const& localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, Microsoft::Holographic::AppRemoting::ICertificateProvider const& provider, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const& receiver) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->ListenSecure(get_abi(localHostname), handshakePort, primaryTransportPort, get_abi(provider), get_abi(receiver)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::Disconnect() const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->Disconnect());
}

template <typename D> Microsoft::Holographic::AppRemoting::ConnectionState consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::ConnectionState() const
{
    Microsoft::Holographic::AppRemoting::ConnectionState result{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->get_ConnectionState(put_abi(result)));
    return result;
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnConnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IRemoteContext> consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnConnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IRemoteContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IRemoteContext>::remove_OnConnected, OnConnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnConnected(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnConnected(get_abi(token)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnDisconnected(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IRemoteContext> consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IRemoteContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IRemoteContext>::remove_OnDisconnected, OnDisconnected(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDisconnected(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnDisconnected(get_abi(token)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(Microsoft::Holographic::AppRemoting::OnSendFrameHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnSendFrame(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IRemoteContext> consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnSendFrameHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IRemoteContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IRemoteContext>::remove_OnSendFrame, OnSendFrame(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnSendFrame(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnSendFrame(get_abi(token)));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority const& priority) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->CreateDataChannel(channelId, get_abi(priority)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->add_OnDataChannelCreated(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IRemoteContext> consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IRemoteContext>(this, &abi_t<Microsoft::Holographic::AppRemoting::IRemoteContext>::remove_OnDataChannelCreated, OnDataChannelCreated(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::OnDataChannelCreated(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->remove_OnDataChannelCreated(get_abi(token)));
}

template <typename D> Microsoft::Holographic::AppRemoting::IRemoteSpeech consume_Microsoft_Holographic_AppRemoting_IRemoteContext<D>::GetRemoteSpeech() const
{
    Microsoft::Holographic::AppRemoting::IRemoteSpeech result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContext)->GetRemoteSpeech(put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create() const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create(put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create2(maxBitrateKbps, put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps, bool enableAudio) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create3(maxBitrateKbps, enableAudio, put_abi(result)));
    return result;
}

template <typename D> Microsoft::Holographic::AppRemoting::RemoteContext consume_Microsoft_Holographic_AppRemoting_IRemoteContextStatics<D>::Create(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const& preferredVideoCodec) const
{
    Microsoft::Holographic::AppRemoting::RemoteContext result{ nullptr };
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteContextStatics)->Create4(maxBitrateKbps, enableAudio, get_abi(preferredVideoCodec), put_abi(result)));
    return result;
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::ApplyParameters(param::hstring const& language, Windows::Storage::IStorageFile const& grammarFile, array_view<hstring const> dictionary) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->ApplyParameters(get_abi(language), get_abi(grammarFile), dictionary.size(), get_abi(dictionary)));
}

template <typename D> event_token consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->add_OnRecognizedSpeech(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<Microsoft::Holographic::AppRemoting::IRemoteSpeech> consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(auto_revoke_t, Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const& handler) const
{
    return impl::make_event_revoker<D, Microsoft::Holographic::AppRemoting::IRemoteSpeech>(this, &abi_t<Microsoft::Holographic::AppRemoting::IRemoteSpeech>::remove_OnRecognizedSpeech, OnRecognizedSpeech(handler));
}

template <typename D> void consume_Microsoft_Holographic_AppRemoting_IRemoteSpeech<D>::OnRecognizedSpeech(event_token const& token) const
{
    check_hresult(WINRT_SHIM(Microsoft::Holographic::AppRemoting::IRemoteSpeech)->remove_OnRecognizedSpeech(get_abi(token)));
}

template <> struct delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke() noexcept final
        {
            try
            {
                (*this)();
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke(uint32_t __dataSize, uint8_t* data) noexcept final
        {
            try
            {
                (*this)(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(data), reinterpret_cast<uint8_t const *>(data) + __dataSize));
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnConnectedHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke() noexcept final
        {
            try
            {
                (*this)();
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke(void* dataChannel, uint8_t channelId) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::IDataChannel const*>(&dataChannel), channelId);
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke(Microsoft::Holographic::AppRemoting::ConnectionFailureReason failureReason) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ConnectionFailureReason const*>(&failureReason));
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke(struct struct_Microsoft_Holographic_AppRemoting_RecognizedSpeech recognizedSpeech) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Microsoft::Holographic::AppRemoting::RecognizedSpeech const*>(&recognizedSpeech));
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <> struct delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler>
{
    template <typename H>
    struct type : implements_delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler, H>
    {
        type(H&& handler) : implements_delegate<Microsoft::Holographic::AppRemoting::OnSendFrameHandler, H>(std::forward<H>(handler)) {}

        HRESULT __stdcall Invoke(void* texture) noexcept final
        {
            try
            {
                (*this)(*reinterpret_cast<Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const*>(&texture));
                return S_OK;
            }
            catch (...)
            {
                return to_hresult();
            }
        }
    };
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationProvider> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationProvider>
{
    HRESULT __stdcall GetToken(void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GetToken(*reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback const*>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback>
{
    HRESULT __stdcall TokenReceived(HSTRING token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TokenReceived(*reinterpret_cast<hstring const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiver>
{
    HRESULT __stdcall ValidateToken(HSTRING token, void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ValidateToken(*reinterpret_cast<hstring const*>(&token), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback const*>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall GetRealm(HSTRING* result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetRealm());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback>
{
    HRESULT __stdcall ValidationCompleted(HSTRING token, bool isValid) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ValidationCompleted(*reinterpret_cast<hstring const*>(&token), isValid);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificate> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificate>
{
    HRESULT __stdcall GetCertificatePfx(uint32_t* __resultSize, uint8_t** result) noexcept final
    {
        try
        {
            *__resultSize = 0;
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetCertificatePfx());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall GetSubjectName(HSTRING* result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetSubjectName());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall GetPfxPassword(HSTRING* result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<hstring>(this->shim().GetPfxPassword());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateChain> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateChain>
{
    HRESULT __stdcall GetCertificate(uint32_t index, uint32_t* __resultSize, uint8_t** result) noexcept final
    {
        try
        {
            *__resultSize = 0;
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            std::tie(*__resultSize, *result) = detach_abi(this->shim().GetCertificate(index));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_Length(uint32_t* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<uint32_t>(this->shim().Length());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateProvider> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateProvider>
{
    HRESULT __stdcall GetCertificate(void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().GetCertificate(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProviderCallback const*>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateProviderCallback>
{
    HRESULT __stdcall CertificateReceived(void* certificate) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CertificateReceived(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificate const*>(&certificate));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateValidationCallback>
{
    HRESULT __stdcall CertificateValidated(struct struct_Microsoft_Holographic_AppRemoting_CertificateValidationResult result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CertificateValidated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::CertificateValidationResult const*>(&result));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Cancel() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Cancel();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::ICertificateValidator> : produce_base<D, Microsoft::Holographic::AppRemoting::ICertificateValidator>
{
    HRESULT __stdcall ValidateCertificate(void* certificateChain, HSTRING serverName, bool forceRevocationCheck, void* systemValidationResult, void* callback) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ValidateCertificate(*reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateChain const*>(&certificateChain), *reinterpret_cast<hstring const*>(&serverName), forceRevocationCheck, *reinterpret_cast<Windows::Foundation::IReference<Microsoft::Holographic::AppRemoting::CertificateValidationResult> const*>(&systemValidationResult), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidationCallback const*>(&callback));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_PerformSystemValidation(bool* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<bool>(this->shim().PerformSystemValidation());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IDataChannel> : produce_base<D, Microsoft::Holographic::AppRemoting::IDataChannel>
{
    HRESULT __stdcall add_OnDataReceived(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnDataReceived(*reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelReceivedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnDataReceived(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDataReceived(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall SendData(uint32_t __dataSize, uint8_t* data, bool guaranteedDelivery) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().SendData(array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(data), reinterpret_cast<uint8_t const *>(data) + __dataSize), guaranteedDelivery);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Close() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Close();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnClosed(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnClosed(*reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelCloseHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnClosed(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnClosed(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IPlayerContext> : produce_base<D, Microsoft::Holographic::AppRemoting::IPlayerContext>
{
    HRESULT __stdcall Connect(HSTRING hostname, uint16_t port) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Connect(*reinterpret_cast<hstring const*>(&hostname), port);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall ConnectSecure(HSTRING hostname, uint16_t port, void* authProvider, void* certValidator) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConnectSecure(*reinterpret_cast<hstring const*>(&hostname), port, *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProvider const*>(&authProvider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidator const*>(&certValidator));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Listen(HSTRING localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Listen(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall ListenSecure(HSTRING localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, void* provider, void* receiver) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ListenSecure(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort, *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProvider const*>(&provider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const*>(&receiver));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Disconnect() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Disconnect();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_ConnectionState(Microsoft::Holographic::AppRemoting::ConnectionState* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::ConnectionState>(this->shim().ConnectionState());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnConnected(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnConnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnConnectedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnConnected(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnConnected(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnDisconnected(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnDisconnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnDisconnected(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDisconnected(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_PoseMode(Microsoft::Holographic::AppRemoting::CameraPoseMode* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::CameraPoseMode>(this->shim().PoseMode());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall put_PoseMode(Microsoft::Holographic::AppRemoting::CameraPoseMode value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().PoseMode(*reinterpret_cast<Microsoft::Holographic::AppRemoting::CameraPoseMode const*>(&value));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall BlitRemoteFrame(Microsoft::Holographic::AppRemoting::BlitResult* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::BlitResult>(this->shim().BlitRemoteFrame());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority priority) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CreateDataChannel(channelId, *reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelPriority const*>(&priority));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnDataChannelCreated(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnDataChannelCreated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnDataChannelCreated(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDataChannelCreated(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_LastFrameStatistics(struct struct_Microsoft_Holographic_AppRemoting_PlayerFrameStatistics* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::PlayerFrameStatistics>(this->shim().LastFrameStatistics());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IPlayerContextStatics> : produce_base<D, Microsoft::Holographic::AppRemoting::IPlayerContextStatics>
{
    HRESULT __stdcall Create(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::PlayerContext>(this->shim().Create());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteContext> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteContext>
{
    HRESULT __stdcall Connect(HSTRING hostname, uint16_t port) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Connect(*reinterpret_cast<hstring const*>(&hostname), port);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall ConnectSecure(HSTRING hostname, uint16_t port, void* authProvider, void* certValidator) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ConnectSecure(*reinterpret_cast<hstring const*>(&hostname), port, *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationProvider const*>(&authProvider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateValidator const*>(&certValidator));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Listen(HSTRING localHostname, uint16_t handshakePort, uint16_t primaryTransportPort) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Listen(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall ListenSecure(HSTRING localHostname, uint16_t handshakePort, uint16_t primaryTransportPort, void* provider, void* receiver) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ListenSecure(*reinterpret_cast<hstring const*>(&localHostname), handshakePort, primaryTransportPort, *reinterpret_cast<Microsoft::Holographic::AppRemoting::ICertificateProvider const*>(&provider), *reinterpret_cast<Microsoft::Holographic::AppRemoting::IAuthenticationReceiver const*>(&receiver));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Disconnect() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Disconnect();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_ConnectionState(Microsoft::Holographic::AppRemoting::ConnectionState* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::ConnectionState>(this->shim().ConnectionState());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnConnected(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnConnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnConnectedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnConnected(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnConnected(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnDisconnected(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnDisconnected(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDisconnectedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnDisconnected(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDisconnected(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnSendFrame(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnSendFrame(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnSendFrameHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnSendFrame(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnSendFrame(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall CreateDataChannel(uint8_t channelId, Microsoft::Holographic::AppRemoting::DataChannelPriority priority) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().CreateDataChannel(channelId, *reinterpret_cast<Microsoft::Holographic::AppRemoting::DataChannelPriority const*>(&priority));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnDataChannelCreated(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnDataChannelCreated(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnDataChannelCreatedHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnDataChannelCreated(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnDataChannelCreated(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall GetRemoteSpeech(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::IRemoteSpeech>(this->shim().GetRemoteSpeech());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteContextStatics> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>
{
    HRESULT __stdcall Create(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Create2(uint32_t maxBitrateKbps, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Create3(uint32_t maxBitrateKbps, bool enableAudio, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps, enableAudio));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Create4(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec preferredVideoCodec, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Microsoft::Holographic::AppRemoting::RemoteContext>(this->shim().Create(maxBitrateKbps, enableAudio, *reinterpret_cast<Microsoft::Holographic::AppRemoting::PreferredVideoCodec const*>(&preferredVideoCodec)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, Microsoft::Holographic::AppRemoting::IRemoteSpeech> : produce_base<D, Microsoft::Holographic::AppRemoting::IRemoteSpeech>
{
    HRESULT __stdcall ApplyParameters(HSTRING language, void* grammarFile, uint32_t __dictionarySize, HSTRING* dictionary) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().ApplyParameters(*reinterpret_cast<hstring const*>(&language), *reinterpret_cast<Windows::Storage::IStorageFile const*>(&grammarFile), array_view<hstring const>(reinterpret_cast<hstring const *>(dictionary), reinterpret_cast<hstring const *>(dictionary) + __dictionarySize));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall add_OnRecognizedSpeech(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().OnRecognizedSpeech(*reinterpret_cast<Microsoft::Holographic::AppRemoting::OnRecognizedSpeechHandler const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_OnRecognizedSpeech(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnRecognizedSpeech(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

}

WINRT_EXPORT namespace winrt::Microsoft::Holographic::AppRemoting {

inline Microsoft::Holographic::AppRemoting::PlayerContext PlayerContext::Create()
{
    return get_activation_factory<PlayerContext, Microsoft::Holographic::AppRemoting::IPlayerContextStatics>().Create();
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create()
{
    return get_activation_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>().Create();
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps)
{
    return get_activation_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>().Create(maxBitrateKbps);
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps, bool enableAudio)
{
    return get_activation_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>().Create(maxBitrateKbps, enableAudio);
}

inline Microsoft::Holographic::AppRemoting::RemoteContext RemoteContext::Create(uint32_t maxBitrateKbps, bool enableAudio, Microsoft::Holographic::AppRemoting::PreferredVideoCodec const& preferredVideoCodec)
{
    return get_activation_factory<RemoteContext, Microsoft::Holographic::AppRemoting::IRemoteContextStatics>().Create(maxBitrateKbps, enableAudio, preferredVideoCodec);
}

template <typename L> DataChannelCloseHandler::DataChannelCloseHandler(L handler) :
    DataChannelCloseHandler(impl::make_delegate<DataChannelCloseHandler>(std::forward<L>(handler)))
{}

template <typename F> DataChannelCloseHandler::DataChannelCloseHandler(F* handler) :
    DataChannelCloseHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> DataChannelCloseHandler::DataChannelCloseHandler(O* object, M method) :
    DataChannelCloseHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void DataChannelCloseHandler::operator()() const
{
    check_hresult((*(impl::abi_t<DataChannelCloseHandler>**)this)->Invoke());
}

template <typename L> DataChannelReceivedHandler::DataChannelReceivedHandler(L handler) :
    DataChannelReceivedHandler(impl::make_delegate<DataChannelReceivedHandler>(std::forward<L>(handler)))
{}

template <typename F> DataChannelReceivedHandler::DataChannelReceivedHandler(F* handler) :
    DataChannelReceivedHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> DataChannelReceivedHandler::DataChannelReceivedHandler(O* object, M method) :
    DataChannelReceivedHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void DataChannelReceivedHandler::operator()(array_view<uint8_t const> data) const
{
    check_hresult((*(impl::abi_t<DataChannelReceivedHandler>**)this)->Invoke(data.size(), get_abi(data)));
}

template <typename L> OnConnectedHandler::OnConnectedHandler(L handler) :
    OnConnectedHandler(impl::make_delegate<OnConnectedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnConnectedHandler::OnConnectedHandler(F* handler) :
    OnConnectedHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> OnConnectedHandler::OnConnectedHandler(O* object, M method) :
    OnConnectedHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void OnConnectedHandler::operator()() const
{
    check_hresult((*(impl::abi_t<OnConnectedHandler>**)this)->Invoke());
}

template <typename L> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(L handler) :
    OnDataChannelCreatedHandler(impl::make_delegate<OnDataChannelCreatedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(F* handler) :
    OnDataChannelCreatedHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> OnDataChannelCreatedHandler::OnDataChannelCreatedHandler(O* object, M method) :
    OnDataChannelCreatedHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void OnDataChannelCreatedHandler::operator()(Microsoft::Holographic::AppRemoting::IDataChannel const& dataChannel, uint8_t channelId) const
{
    check_hresult((*(impl::abi_t<OnDataChannelCreatedHandler>**)this)->Invoke(get_abi(dataChannel), channelId));
}

template <typename L> OnDisconnectedHandler::OnDisconnectedHandler(L handler) :
    OnDisconnectedHandler(impl::make_delegate<OnDisconnectedHandler>(std::forward<L>(handler)))
{}

template <typename F> OnDisconnectedHandler::OnDisconnectedHandler(F* handler) :
    OnDisconnectedHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> OnDisconnectedHandler::OnDisconnectedHandler(O* object, M method) :
    OnDisconnectedHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void OnDisconnectedHandler::operator()(Microsoft::Holographic::AppRemoting::ConnectionFailureReason const& failureReason) const
{
    check_hresult((*(impl::abi_t<OnDisconnectedHandler>**)this)->Invoke(get_abi(failureReason)));
}

template <typename L> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(L handler) :
    OnRecognizedSpeechHandler(impl::make_delegate<OnRecognizedSpeechHandler>(std::forward<L>(handler)))
{}

template <typename F> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(F* handler) :
    OnRecognizedSpeechHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> OnRecognizedSpeechHandler::OnRecognizedSpeechHandler(O* object, M method) :
    OnRecognizedSpeechHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void OnRecognizedSpeechHandler::operator()(Microsoft::Holographic::AppRemoting::RecognizedSpeech const& recognizedSpeech) const
{
    check_hresult((*(impl::abi_t<OnRecognizedSpeechHandler>**)this)->Invoke(get_abi(recognizedSpeech)));
}

template <typename L> OnSendFrameHandler::OnSendFrameHandler(L handler) :
    OnSendFrameHandler(impl::make_delegate<OnSendFrameHandler>(std::forward<L>(handler)))
{}

template <typename F> OnSendFrameHandler::OnSendFrameHandler(F* handler) :
    OnSendFrameHandler([=](auto&&... args) { handler(args...); })
{}

template <typename O, typename M> OnSendFrameHandler::OnSendFrameHandler(O* object, M method) :
    OnSendFrameHandler([=](auto&&... args) { ((*object).*(method))(args...); })
{}

inline void OnSendFrameHandler::operator()(Windows::Graphics::DirectX::Direct3D11::IDirect3DSurface const& texture) const
{
    check_hresult((*(impl::abi_t<OnSendFrameHandler>**)this)->Invoke(get_abi(texture)));
}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProvider> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProvider> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationProviderCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiver> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IAuthenticationReceiverCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificate> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificate> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateChain> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateChain> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateProvider> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateProvider> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateProviderCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidationCallback> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidator> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::ICertificateValidator> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IDataChannel> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IDataChannel> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IPlayerContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IPlayerContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IPlayerContextStatics> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IPlayerContextStatics> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteContextStatics> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteContextStatics> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::IRemoteSpeech> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::IRemoteSpeech> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::PlayerContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::PlayerContext> {};
template<> struct hash<winrt::Microsoft::Holographic::AppRemoting::RemoteContext> : winrt::impl::hash_base<winrt::Microsoft::Holographic::AppRemoting::RemoteContext> {};

}

WINRT_WARNING_POP
