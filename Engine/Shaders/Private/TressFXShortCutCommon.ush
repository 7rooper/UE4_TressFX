//---------------------------------------------------------------------------------------
// Shader code related to simulating hair strands in compute.
//-------------------------------------------------------------------------------------
//
// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//
#pragma once
#include "Common.ush"
#include "SHCommon.ush"
#include "TressFXCommon.ush"

#define SHORTCUT_MIN_ALPHA 0.02
#define TRESSFX_MIN_ALPHA_FOR_SCENE_DEPTH 0.5f

float4 vFragmentBufferSize;

// Convert 1D address to 2D address
int2 GetAddress(int nAddress)
{
    uint nBufferWidth = vFragmentBufferSize.x;
    int2 vAddress = int2(nAddress % nBufferWidth, nAddress / nBufferWidth);
    return vAddress;
}

// Convert 2D address to 1D address
uint GetAddress(int2 vAddress)
{
    int nAddress = vAddress.y * vFragmentBufferSize.x + vAddress.x;
    return nAddress;
}

float3 ScreenPosToNDC2(float4 SvPosition)
{
    float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;

	// NDC (NormalizedDeviceCoordinates, after the perspective divide)
    float3 NDCPos = float3((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);
    return NDCPos;
}

float3 ScreenPosToNDC(float3 vScreenPos, float4 viewport)
{
    float2 xy = vScreenPos.xy;

	// add viewport offset.
    xy += viewport.xy;

	// scale by viewport to put in 0 to 1
    xy /= viewport.zw;

	// shift and scale to put in -1 to 1. y is also being flipped.
    xy.x = (2 * xy.x) - 1;
    xy.y = 1 - (2 * xy.y);

    return float3(xy, vScreenPos.z);
}

float3 ScreenToNDC(float3 vScreenPos, float4 viewport)
{
    float2 xy = vScreenPos.xy;

	// add viewport offset.
    xy += viewport.xy;

	// scale by viewport to put in 0 to 1
    xy /= viewport.zw;

	// shift and scale to put in -1 to 1. y is also being flipped.
    xy.x = (2 * xy.x) - 1;
    xy.y = 1 - (2 * xy.y);

    return float3(xy, vScreenPos.z);

}

float3 NDCToWorld(float3 vNDC, float4x4 mInvViewProj)
{
    float4 pos = mul(mInvViewProj, float4(vNDC, 1));
	
    return pos.xyz / pos.w;
}


// viewport.xy = offset, viewport.zw = size
float3 GetWorldPos(float4 vScreenPos, float4 viewport, float4x4 invViewProj)
{
    float2 xy = vScreenPos.xy;

	// add viewport offset.
    xy += viewport.xy;

	// scale by viewport to put in 0 to 1
    xy /= viewport.zw;

	// shift and scale to put in -1 to 1. y is also being flipped.
    xy.x = (2 * xy.x) + 1;
    xy.y = 1 - (2 * xy.y);

    float4 pos = mul(invViewProj, float4(xy.x, xy.y, vScreenPos.z, 1));
	//float4 pos = float4(xy.x, xy.y, 1, 1);
	//pos *= sv_pos.w;
	
    return pos.xyz / pos.w;
}
