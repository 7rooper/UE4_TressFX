#include "Common.ush"

#ifndef THREAD_GROUP_SIZE
	#define THREAD_GROUP_SIZE 64
#endif

#ifndef AMD_TRESSFX_MAX_NUM_BONES
	#define AMD_TRESSFX_MAX_NUM_BONES 256
#endif

float4 UnpackUintIntoFloat4(uint uValue)
{
    return float4(((uValue & 0xFF000000) >> 24) / 255.0, ((uValue & 0x00FF0000) >> 16) / 255.0, ((uValue & 0x0000FF00) >> 8) / 255.0, ((uValue & 0x000000FF)) / 255.0);
}

cbuffer TressFXBoneSkinningParameters
{
    row_major float4x4 BoneSkinningMatrix[AMD_TRESSFX_MAX_NUM_BONES];
    int NumMeshVertices;
}

struct StandardVertex
{
    float3 position;
    float3 normal;
};

struct FBoneSkinningData
{
    float4 boneIndex; // x, y, z and w component are four bone indices per strand
    float4 boneWeight; // x, y, z and w component are four bone weights per strand
};

row_major float4x4 UnPackBoneMatrix(uint4 PackedMatrix)
{
    float4 X = UnpackUintIntoFloat4(PackedMatrix.x);
    float4 Y = UnpackUintIntoFloat4(PackedMatrix.y);
    float4 Z = UnpackUintIntoFloat4(PackedMatrix.z);
    float4 W = UnpackUintIntoFloat4(PackedMatrix.w);
	return float4x4(X,Y,Z,W);
}

// UAVs		
RWStructuredBuffer<StandardVertex> CollMeshVertexPositions;

// SRVs
StructuredBuffer<FBoneSkinningData> BoneSkinningData;
StructuredBuffer<StandardVertex> InitialVertexPositions;
[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void BoneSkinning(uint GIndex : SV_GroupIndex, uint3 GId : SV_GroupID, uint3 DTid : SV_DispatchThreadID)
{
    uint local_id = GIndex;
    uint group_id = GId.x;
    uint global_id = local_id + group_id * THREAD_GROUP_SIZE;

    if (global_id >= NumMeshVertices)
        return;

    float3 pos = InitialVertexPositions[global_id].position;
    float3 n = InitialVertexPositions[global_id].normal;

	// compute a bone skinning transform
    FBoneSkinningData skinning = BoneSkinningData[global_id];

	// Interpolate world space bone matrices using weights. 
    row_major float4x4 bone_matrix = BoneSkinningMatrix[skinning.boneIndex[0]] * skinning.boneWeight[0];
    float weight_sum = skinning.boneWeight[0];

	// Each vertex gets influence from four bones. In case there are less than four bones, boneIndex and boneWeight would be zero. 
	// This number four was set in Maya exporter and also used in loader. So it should not be changed unless you have a very strong reason and are willing to go through all spots.
    for (int i = 1; i < 4; i++)
    {
        if (skinning.boneWeight[i] > 0)
        {
            bone_matrix += BoneSkinningMatrix[skinning.boneIndex[i]] * skinning.boneWeight[i];
            weight_sum += skinning.boneWeight[i];
        }
    }

    bone_matrix /= weight_sum;

    pos.xyz = mul(float4(pos.xyz, 1), bone_matrix).xyz;
    n.xyz = mul(float4(n.xyz, 0), bone_matrix).xyz;
    CollMeshVertexPositions[global_id].position = pos;
    CollMeshVertexPositions[global_id].normal = n;
}
