//
// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

//Unreal Engine 4 integration written by Leon Rosengarten and Jacob Kostenick 2019


#include "TressFXShortCutCommon.ush"
#include "TressFXRendering.ush"

#ifndef SHORTCUT_COMPUTE_RESOLVE
	#define SHORTCUT_COMPUTE_RESOLVE 0
#endif

Texture2D<float4> FragmentColorsTexture;
Texture2D<float> AccumInvAlpha;

bool ResolveShortCut(int2 vScreenAddress, out float4 outColor)
{
    float fInvAlpha = AccumInvAlpha[vScreenAddress];
    float fAlpha = saturate(1.0 - fInvAlpha);

    if (fAlpha < SHORTCUT_MIN_ALPHA)
    {
        outColor = float4(0, 0, 0, 1);
        return false;
    }
    float4 fcolor;
    float colorSumX = FragmentColorsTexture[vScreenAddress].x;
    float colorSumY = FragmentColorsTexture[vScreenAddress].y;
    float colorSumZ = FragmentColorsTexture[vScreenAddress].z;
    float colorSumW = FragmentColorsTexture[vScreenAddress].w;
    fcolor.x = saturate(colorSumX / colorSumW);
    fcolor.y = saturate(colorSumY / colorSumW);
    fcolor.z = saturate(colorSumZ / colorSumW);
    fcolor.xyz *= fAlpha;
    fcolor.w = fInvAlpha;
    outColor = fcolor;
    return true;
}

// Fourth pass of ShortCut.
// Full-screen pass that finalizes the weighted average, and blends using the accumulated 1-alpha product.
EARLYDEPTHSTENCIL
void ShortcutResolvePS(FScreenVertexOutput input, out float4 outColor : SV_Target)
{
    ResolveShortCut(int2(input.Position.xy), outColor);
}

//////////// compute version

RWTexture2D<float4> SceneColorTex;
float4 TextureSize; //size of the SceneColorTex

#ifndef THREADGROUP_SIZEX
	#define THREADGROUP_SIZEX 32
#endif

#ifndef THREADGROUP_SIZEY
	#define THREADGROUP_SIZEY 32
#endif

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void ShortcutResolveCS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelID = uint2(DispatchThreadId.x, DispatchThreadId.y);
    float4 OutColor;
	
    BRANCH
    if (pixelID.x <= TextureSize.x && pixelID.y <= TextureSize.y)
    {
        if (ResolveShortCut(pixelID, OutColor))
        {
            SceneColorTex[pixelID] = (SceneColorTex[pixelID] * OutColor.a) + OutColor;
        }
    }
}