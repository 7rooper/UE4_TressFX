// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#ifndef DIM_DENOISER_OUTPUT
	#define DIM_DENOISER_OUTPUT 0
#endif

#include "../Common.ush"

float2 SobolIndexToUniformUnitSquare(uint2 SobolRand)
{
	return float2(SobolRand) * rcp(65536.0) + rcp(65536.0 * 2.0);
}

#define SUPPORT_CONTACT_SHADOWS		0
#define USE_SOURCE_TEXTURE			0 //Used in RectLight.ush  //#dxr_todo: enable textures

#include "../DeferredShadingCommon.ush"
#include "../DeferredLightingCommon.ush"
#include "../ReflectionEnvironmentShared.ush"
#include "../Montecarlo.ush"
#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" // #dxr-todo: move to a common folder
#include "../HeightFogCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingHitGroupCommon.ush"

uint SamplesPerPixel;
uint HeightFog;
uint ShouldDoDirectLighting;
uint ShouldDoReflectedShadows;
uint ShouldDoEmissiveAndIndirectLighting;
uint UpscaleFactor;

float ReflectionMinRayDistance;
float ReflectionMaxRayDistance;
float ReflectionMaxRoughness;

RaytracingAccelerationStructure TLAS;

RWTexture2D<float4> ColorOutput;
RWTexture2D<float> RayHitDistanceOutput;

#include "RayTracingLightingCommon.ush"

// #dxr-todo: move to RayTracingCommon.ush
float3 ReconstructWorldPositionFromDepth(float2 UV, float Depth)
{
	float2 ScreenPosition = (UV - View.ScreenPositionScaleBias.wz) / View.ScreenPositionScaleBias.xy;
	float4 HomogeneousWorldPosition = mul(float4(ScreenPosition * Depth, Depth, 1), View.ScreenToWorld);
	float3 WorldPosition = HomogeneousWorldPosition.xyz / HomogeneousWorldPosition.w;

	return WorldPosition;
}

uint2 GetPixelCoord(uint2 DispatchThreadId)
{
	uint UpscaleFactorPow2 = UpscaleFactor * UpscaleFactor;

	// TODO: find a way to not interfer with TAA's jittering.
	uint SubPixelId = View.StateFrameIndex & (UpscaleFactorPow2 - 1);

	return DispatchThreadId * UpscaleFactor + uint2(SubPixelId & (UpscaleFactor - 1), SubPixelId / UpscaleFactor);
}


[shader("raygeneration")]
void RayTracingReflectionsRGS()
{
	uint2 DispatchThreadId = DispatchRaysIndex().xy;

	uint2 PixelCoord = GetPixelCoord(DispatchThreadId);
	
	uint LinearIndex = PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x; // TODO: PixelCoord or DispatchThreadId
	
	RandomSequence RandSequence;
	RandomSequence_Initialize(RandSequence, LinearIndex, View.FrameNumber);

	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	float Depth = ScreenSpaceData.GBuffer.Depth;

	uint LocalSamplesPerPixel = SamplesPerPixel;

	// Mask out depth values at or beyond far plane
	if (Depth >= SCENE_TEXTURES_DISABLED_SCENE_DEPTH_VALUE)
	{
		LocalSamplesPerPixel = 0;
	}

	float4 ReflectedColor = 0.0;
	float ReflectedWeight = 0.0;
	float HitDistance = -2.0;

	float RoughnessFade = GetRoughnessFade(ScreenSpaceData.GBuffer.Roughness, ReflectionMaxRoughness);
	float ClearCoatRoughnessFade = ScreenSpaceData.GBuffer.ShadingModelID == SHADINGMODELID_CLEAR_COAT ? GetRoughnessFade(ScreenSpaceData.GBuffer.CustomData.y, ReflectionMaxRoughness) : 1.0f;

	// Sky is only sampled when infinite reflection rays are used.
	const bool bAllowSkySampling = ReflectionMaxRayDistance < 0;

	// Shorten the rays on rougher surfaces between user-provided min and max ray lengths.
	// When a shortened ray misses the geometry, we fall back to local reflection capture sampling (similar to SSR).
	const float LocalMaxRayDistance = bAllowSkySampling ? 1e27f : lerp(ReflectionMaxRayDistance, ReflectionMinRayDistance, ScreenSpaceData.GBuffer.Roughness);

	if (RoughnessFade > 0 || ClearCoatRoughnessFade > 0)
	{
		for (uint SampleIndex = 0; SampleIndex < LocalSamplesPerPixel; ++SampleIndex)
		{
			bool bIsValidSample = false;
			
			float3 PathRadiance = 0;
			float3 BRDFThroughput = float3(1.0f, 1.0f, 1.0f);
			
			// Initialize path states according to GBuffer
			float3 CameraOrigin = ReconstructWorldPositionFromDepth(UV, 0.0f);
			float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
			float3 CameraDirection = normalize(WorldPosition - CameraOrigin);
			float3 WorldNormal = ScreenSpaceData.GBuffer.WorldNormal;
			float Roughness = ScreenSpaceData.GBuffer.Roughness;
			float3 SpecularColor = ScreenSpaceData.GBuffer.SpecularColor;
			float3 IncidentDirection = CameraDirection;
			float ClearCoat;
			float ClearCoatRoughness;
			#if CLEAR_COAT_BOTTOM_NORMAL
			float3 ClearCoatBottomNormal;
			#endif
			
			uint ShadingModelID = ScreenSpaceData.GBuffer.ShadingModelID;
			if (ShadingModelID == SHADINGMODELID_CLEAR_COAT)
			{
				ClearCoat = ScreenSpaceData.GBuffer.CustomData.x;
				ClearCoatRoughness = ScreenSpaceData.GBuffer.CustomData.y;
				#if CLEAR_COAT_BOTTOM_NORMAL
					const float2 oct1 = ((float2(ScreenSpaceData.GBuffer.CustomData.a, ScreenSpaceData.GBuffer.CustomData.z) * 2) - (256.0/255.0)) + UnitVectorToOctahedron(ScreenSpaceData.GBuffer.WorldNormal);
					ClearCoatBottomNormal = OctahedronToUnitVector(oct1);
				#endif
			}
			else
			{
				ClearCoat = 1.0f;
				ClearCoatRoughness = 1.0f;
				#if CLEAR_COAT_BOTTOM_NORMAL
					ClearCoatBottomNormal = WorldNormal;
				#endif
			}

			FRayCone RayCone = (FRayCone)0;
			RayCone.SpreadAngle = View.EyeToPixelSpreadAngle;
            float SurfaceCurvature = 0.0f; /* #todo_dxr assume no curvature */
			RayCone = PropagateRayCone(RayCone, SurfaceCurvature, Depth);

			uint DummyVariable;
				
			const uint MaxBounces = 1;
			// Add one more 'fake bounce' and we will evaluate cubemap there
			for (uint BounceIndex = 0; BounceIndex < MaxBounces + 1; ++BounceIndex)
			{
				float NoV = saturate(dot(-IncidentDirection, WorldNormal));
				float FinalRoughness = Roughness;
				if (ShadingModelID == SHADINGMODELID_CLEAR_COAT)
				{
					float F = EnvBRDF( 0.04, ClearCoatRoughness, NoV ).x;
					F *= ClearCoat;
					
					float w = RandomSequence_GenerateSample1D(RandSequence, DummyVariable);
					
					if (w <= F)
					{
						SpecularColor = 0.04;
						FinalRoughness = ClearCoatRoughness;
					}
					else
					{
						#if CLEAR_COAT_BOTTOM_NORMAL
							WorldNormal = ClearCoatBottomNormal;
							NoV = saturate(dot(-IncidentDirection, WorldNormal));
						#endif
						BRDFThroughput *= EnvBRDF( SpecularColor, Roughness, NoV );
					}
				}
				else
				{
					// If it is not clear coat, and we're on the first bounce, the G F terms will be applied by ReflectionEnvironmentPixelShader
					if (BounceIndex > 0)
						BRDFThroughput *= EnvBRDF( SpecularColor, Roughness, NoV );
				}				

				RayDesc Ray;
				Ray.Origin = WorldPosition + WorldNormal * 0.01;
				Ray.TMin = 0.0;
				Ray.TMax = LocalMaxRayDistance;
				
				int RetryCount = 0;
				do
				{
					float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

					// Sobol can only be used on the first sample of the first bounce
					if (BounceIndex == 0 && LocalSamplesPerPixel == 1 && RetryCount == 0)
					{
						uint2 SobolFrame = ComputePixelUniqueSobolRandSample(DispatchThreadId);
						RandSample = SobolIndexToUniformUnitSquare(SobolFrame);
					}
				
					Ray.Direction = GenerateReflectedRayDirection(IncidentDirection, WorldNormal, FinalRoughness, RandSample);
				} while (dot(WorldNormal, Ray.Direction) < 0.0 && ++RetryCount < 16);

				if (dot(WorldNormal, Ray.Direction) < 0.0)
				{
					// Refraction rays are handled separately
					bIsValidSample = false;
					break;
				}

				//#dxr-todo: apply heuristics to do different shading computations depending on BounceIndex

				uint RayFlags = RAY_FLAG_CULL_BACK_FACING_TRIANGLES;

				float3 Radiance = float3(0, 0, 0);
				FMaterialClosestHitPayload Payload;
				
				// Force the ray to miss on the MaxBounces + 1 fake bounce, so that we fallback to cubemap there
				if (BounceIndex < MaxBounces)
				{
					Payload = TraceRayAndAccumulateResults(Ray, RayCone, Radiance);
				}

				bool bApplyHeightFog = false;
				float3 OriginToCollider = 0.0f;

				// Force the ray to miss on the MaxBounces + 1 fake bounce, so that we fallback to cubemap there
				if (Payload.HitT >= 0 && BounceIndex < MaxBounces)
				{
					PathRadiance += BRDFThroughput * Radiance; 
					bIsValidSample = true;

					if (BounceIndex == 0)
					{
						HitDistance = Payload.HitT;
					}

					bApplyHeightFog = HeightFog > 0;
					OriginToCollider = Payload.WorldPos - Ray.Origin;
				}
				else if (bAllowSkySampling && ReflectionStruct.SkyLightParameters.y > 0)
				{
					float SkyAverageBrightness = 1.0f;
					float3 SkyLighting = GetSkyLightReflection(Ray.Direction, FinalRoughness, SkyAverageBrightness);
					PathRadiance += BRDFThroughput * SkyLighting;
					bIsValidSample = true;

					bApplyHeightFog = HeightFog > 0;
					const float SkyFarDistance = 100000.0f;
					OriginToCollider = Ray.Direction * SkyFarDistance;

					if (BounceIndex == 0)
					{
						// To tell the denoiser the black input is valid even if no valid ray trace result was found. Uses a high ray hit distance
						// so that the sample may be reused by another neighbor pixel in the denoise as if RoughnessFade in ]0;1[.
						HitDistance = 1.0e20;
					}
				}
				else
				{
					if (BounceIndex == 0)
					{
						// Tell to the denoiser this sample reached outer bounds of the scene without any intersection.
						HitDistance = -1;
					}
				}

				// If there is a contribution on this path, apply the required fog on the sample. 
				// Also accumulate the path contribution.
				// In case no contribution is accumulated, the ReflectionEnvironmentAndSky pass will fill it up using reflection volumes.
				//#dxr - todo: when MaxBounces>1, we will need to take into account a path throughput affected from the fog trnasmittance.
				if (bApplyHeightFog)
				{
					float4 HeightFogInscatteringAndTransmittance = CalculateHeightFog(OriginToCollider);
					PathRadiance.rgb = PathRadiance.rgb * HeightFogInscatteringAndTransmittance.a + HeightFogInscatteringAndTransmittance.rgb;
				}
				
				IncidentDirection = Ray.Direction;
				WorldPosition = Ray.Origin + Payload.HitT * Ray.Direction;
				WorldNormal = Payload.WorldNormal;
				Roughness = Payload.Roughness;
				SpecularColor = Payload.SpecularColor;
				
				ShadingModelID = Payload.ShadingModelID;
				if (ShadingModelID == SHADINGMODELID_CLEAR_COAT)
				{
					ClearCoat = Payload.CustomData.x;
					ClearCoatRoughness = Payload.CustomData.y;
					#if CLEAR_COAT_BOTTOM_NORMAL
						const float2 oct1 = ((float2(Payload.CustomData.a, Payload.GBuffer.CustomData.z) * 2) - (256.0/255.0)) + UnitVectorToOctahedron(Payload.WorldNormal);
						ClearCoatBottomNormal = OctahedronToUnitVector(oct1);
					#endif
				}
				
				if (all(BRDFThroughput < 0.1)) break;
			}
			
			if (bIsValidSample)
			{
				ReflectedColor += float4(PathRadiance, 1.0f);
				ReflectedWeight += 1.0;
			}
		}
	}

	if (ReflectedWeight > 0)
	{
		float DistanceFadeRange = LocalMaxRayDistance * 0.1; // Fade out reflections over 10% of the total maximum ray length (arbitrarily chosen)
		float DistanceFade = bAllowSkySampling ? 1.0 : saturate((LocalMaxRayDistance - HitDistance) * rcp(DistanceFadeRange));
		
		ReflectedColor *= DistanceFade * max(RoughnessFade, ClearCoatRoughnessFade) * rcp(ReflectedWeight);
	}

	ColorOutput[DispatchThreadId] = float4(ReflectedColor);
	RayHitDistanceOutput[DispatchThreadId] = HitDistance;
}


[shader("miss")]
void RayTracingReflectionsMainMS(inout FPackedMaterialClosestHitPayload PackedPayload)
{
	PackedPayload.Payload.HitT = -1;
}


[shader("closesthit")]
void RayTracingReflectionsMainCHS(inout FPackedMaterialClosestHitPayload PackedPayload, in FDefaultAttributes Attributes)
{
	FMaterialClosestHitPayload Payload = (FMaterialClosestHitPayload)0;

	Payload.HitT = RayTCurrent();
	Payload.BaseColor = float3(0.2, 0.3, 0.4);

	FTriangleBaseAttributes Triangle = LoadTriangleBaseAttributes(PrimitiveIndex());
	float3 Edge0 = Triangle.LocalPositions[2] - Triangle.LocalPositions[0];
	float3 Edge1 = Triangle.LocalPositions[1] - Triangle.LocalPositions[0];
	float3x3 WorldToLocal = (float3x3)WorldToObject();
	float3x3 LocalToWorldNormal = transpose(WorldToLocal);
	Payload.WorldNormal = normalize(mul(LocalToWorldNormal, cross(Edge0, Edge1)));

	PackedPayload = PackRayTracingPayload(Payload, PackedPayload.RayCone);
}
