// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingSpecularReflection.usf: Lambertian BRDF sampling functions
===============================================================================================*/
#pragma once

void SpecularReflection_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutDirection,
	out float3 OutThroughput,
	out float OutPdf)
{
	float3 N_World = GetWorldNormal(Payload);
	float3 DiffuseColor = GetDiffuseColor(Payload);

	//OutDirection = reflect(RayDirection, N_World); // To reflect in world coords directly
	float3 V_World = normalize(-RayDirection);
	float3 V_Local = WorldToTangent(V_World, N_World);

	float3 L_Local;
	L_Local.x = -V_Local.x;
	L_Local.y = -V_Local.y;
	L_Local.z = V_Local.z;
	OutDirection = TangentToWorld(L_Local, N_World);

	float NoL = max(L_Local.z, 0.0);
	OutThroughput = DiffuseColor * NoL;
	OutPdf = 1.0;
}

float SpecularReflection_Pdf()
{
	return 0.0;
}

void SpecularReflection_EvalMaterial(out float3 OutThroughput, out float OutPdf)
{
	OutThroughput = float3(0.0, 0.0, 0.0);
	OutPdf = SpecularReflection_Pdf();
}