// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
PathTracingSpecularTransmission.usf: Pure specular transmission BTDF sampling functions
===============================================================================================*/

#pragma once

void SpecularRefraction_SampleMaterial(
	float3 RayDirection,
	FMaterialClosestHitPayload Payload,
	out float3 OutDirection,
	out float3 OutThroughput,
	out float OutPdf)
{
	float3 N_World = GetWorldNormal(Payload);
	float3 SpecularColor = Payload.BaseColor;// GetSpecularColor(Payload);

	float3 V_World = normalize(-RayDirection);
	float3 V_Local = WorldToTangent(V_World, N_World);
	float3 L_Local;

	float3 N = float3(0.0, 0.0, 1.0);
	if (dot(V_Local, N) < 0.0)
	{
		N = -N;
	}

	float Ior1 = Payload.Ior;
	float Ior2 = 1.0f;
	float Eta = Ior1 / Ior2;
	bool bIsEntering = (dot(RayDirection, N_World) < 0.0);
	if (bIsEntering)
	{
		Eta = 1.0 / Payload.Ior;
	}
	
	if (BSDF_Refract(V_Local, N, Eta, L_Local))
	{
		OutDirection = TangentToWorld(L_Local, N_World);

		float SqrRatio = 1.0;// (IorI * IorI) / (IorT * IorT);	// SqrRatio is 1 for light rays	
		OutThroughput = SqrRatio * SpecularColor * (float3(1.0f, 1.0f, 1.0f) - FresnelDielectric(L_Local.z, Ior2, Ior1)) / abs(L_Local.z);
	}
	else
	{
		OutThroughput = float3(0.0, 0.0, 0.0);
	}

	OutPdf = 1.0;
}

float SpecularTransmission_Pdf()
{
	return 0.0;
}

void SpecularTransmission_EvalMaterial(out float3 OutThroughput, out float OutPdf)
{
	OutThroughput = float3(0.0, 0.0, 0.0);
	OutPdf = SpecularTransmission_Pdf();
}
