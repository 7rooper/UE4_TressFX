// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../RectLight.ush"
//#include "../MonteCarlo.ush"
#include "../DeferredShadingCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingHitGroupCommon.ush"

#include "../PathTracing/Utilities/PathTracingRandomSequence.ush" 
#include "../PathTracing/Light/PathTracingLightSampling.ush"
#include "../PathTracing/Material/PathTracingMaterialSampling.ush"

RaytracingAccelerationStructure TLAS;
RWTexture2D<float4> RWGlobalIlluminationUAV;
RWTexture2D<float2> RWRayDistanceUAV;

uint SamplesPerPixel;
uint MaxBounces;
float MaxRayDistance;
bool EvalSkyLight;

uint CalcLinearIndex(uint2 PixelCoord)
{
	return PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x;
}

void GenerateCosineNormalRay(
	float3 WorldPosition,
	float3 WorldNormal,
	inout RandomSequence RandSequence,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Draw random variable
	float2 BufferSize = View.BufferSizeAndInvSize.xy;
	uint DummyVariable;
	float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

	// Perform cosine-hemispherical sampling and convert to world-space
	float4 Direction_Tangent = CosineSampleHemisphere(RandSample);
	float3 Direction_World = TangentToWorld(Direction_Tangent.xyz, WorldNormal);

	RayOrigin = WorldPosition + WorldNormal * 0.01;
	RayDirection = Direction_World;
	RayTMin = 0.0;
	RayTMax = MaxRayDistance;
	RayPdf = Direction_Tangent.w;
}

float GetHitT(FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.HitT;
}

bool IsHit(RayDesc Ray, FMaterialClosestHitPayload HitInfo)
{
	return HitInfo.HitT >= 0.0;
}

[shader("raygeneration")]
void GlobalIlluminationRGS()
{
	uint2 PixelCoord = DispatchRaysIndex().xy;
	RandomSequence RandSequence;
	uint LinearIndex = CalcLinearIndex(PixelCoord);
	RandomSequence_Initialize(RandSequence, LinearIndex, View.FrameNumber);

	bool IsUnidirectionalEnabled = false;
	bool IsNextEventEstimationEnabled = true;

	// Get G-Buffer surface data
	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	float Depth = ScreenSpaceData.GBuffer.Depth;
	float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
	float3 WorldNormal = ScreenSpaceData.GBuffer.WorldNormal;

	// #dxr_todo: Determine importance of computing GI based on BRDF and geometric term
	float3 DiffuseColor = ScreenSpaceData.GBuffer.DiffuseColor;
	float3 BaseColor = ScreenSpaceData.GBuffer.BaseColor;

	float3 Irradiance = 0;
	float HitDistance = 0.0;
	float HitCount = 0.0;
	for (uint SampleIndex = 0; SampleIndex < SamplesPerPixel; ++SampleIndex)
	{
#if 0
		const uint TemporalBits = 7;
		uint FrameIndex = View.FrameNumber % 1024;
		RandomSequence_Initialize(RandSequence, LinearIndex, FrameIndex * SamplesPerPixel + SampleIndex);
		RandSequence.Type = 2;
#endif

		// Initialize ray
		RayDesc Ray;
		float RayPdf = 1.0;
#if 1
		GenerateCosineNormalRay(WorldPosition, WorldNormal, RandSequence, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
		float3 RayThroughput = DiffuseColor * RayPdf;
#else
		uint DummyVariable;
		float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);
		float2 ViewportUV = (PixelCoord.xy + RandSample.xy) * View.BufferSizeAndInvSize.zw;
		Ray.Origin = ReconstructWorldPositionFromDepth(ViewportUV, 0.0f);
		Ray.Direction = normalize(ReconstructWorldPositionFromDepth(ViewportUV, 1.f) - Ray.Origin);
		Ray.TMin = 0.0;
		Ray.TMax = 1.0e12;
		float3 RayThroughput = 1.0;
#endif
		Ray.TMax = MaxRayDistance;
		
		float MaterialPdf = 0.0;
		uint Bounce = 0;
		while (Bounce < MaxBounces)
		{
			// Cast ray
			uint RayFlags = 0;
			FRayCone RayCone = (FRayCone)0;
			FMaterialClosestHitPayload Payload = TraceRayInternal(
				TLAS,   // AccelerationStructure
				RayFlags,
				0xFF,   // InstanceInclusionMask
				0,      // RayContributionToHitGroupIndex
				1,      // MultiplierForGeometryContributionToShaderIndex #dxr_todo: we currently only support shader binding per mesh instance
				0,      // MissShaderIndex
				Ray,    // RayDesc
				RayCone
			);

			// Environment hit
			if (!IsHit(Ray, Payload))
			{
				// Optional multi-bounce SkyLight contribution
				if (EvalSkyLight && Bounce > 0)
				{
					uint SkyLightId = 0;
					float3 EnvironmentRadiance = 0.0;
					SkyLight_EvalLight(SkyLightId, Ray.Direction, Ray, EnvironmentRadiance);
					Irradiance += EnvironmentRadiance * RayThroughput / RayPdf;
				}
				break;
			}
			// #dxr_todo: Allow for material emission?

			if (Bounce == 0)
			{
				HitDistance += Payload.HitT;
				HitCount += 1.0;
			}

			// Update intersection
			Ray.Origin += Ray.Direction * Payload.HitT;

			// Perform next-event estimation
			if (IsNextEventEstimationEnabled)
			{
				// #dxr_todo: Many-light selection
				int LightId;
				float3 LightUV;
				float NeePdf = 0.0;
				uint DummyVariable;
				float4 RandSample4 = RandomSequence_GenerateSample4D(RandSequence, DummyVariable);
				SampleLight(Ray, Payload, RandSample4, LightId, LightUV, NeePdf);

				if (NeePdf > 0.0)
				{
					RayDesc LightRay;
					GenerateLightRay(Ray, LightId, LightUV, LightRay);
					LightRay.Origin += Payload.WorldNormal * 0.01;
					// #dxr_todo: Guard against tracing a back-facing ray

					// Trace visibility ray
					uint RayFlags = RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH | RAY_FLAG_SKIP_CLOSEST_HIT_SHADER;
					FRayCone LightRayCone = (FRayCone)0;
					FMaterialClosestHitPayload NeePayload = TraceRayInternal(
						TLAS,   // AccelerationStructure
						RayFlags,
						0xFF,   // InstanceInclusionMask
						0,      // RayContributionToHitGroupIndex
						1,      // MultiplierForGeometryContributionToShaderIndex #dxr_todo: we currently only support shader binding per mesh instance
						0,      // MissShaderIndex
						LightRay,    // RayDesc
						LightRayCone
					);

					// No hit indicates successful next-event connection
					if (!IsHit(LightRay, NeePayload))
					{
						// Evaluate radiance
						float3 Radiance;
						EvalLight(LightId, LightUV, LightRay, Radiance);

						// Evaluate material
						float3 MaterialThroughput;
						float MaterialEvalPdf = 0.0;
#if 0
						EvalMaterial(Ray.Direction, LightRay.Direction, Payload, MaterialThroughput, MaterialEvalPdf);
#else
						MaterialEvalPdf = saturate(dot(Payload.WorldNormal, LightRay.Direction)) / PI;
						MaterialThroughput = Payload.DiffuseColor * MaterialEvalPdf;
#endif
						// Apply material Pdf for correct MIS weight
						float MisWeight = 1.0;
#if 0
						if (IsUnidirectionalEnabled && IsPhysicalLight(LightId))
						{
							MisWeight = NeePdf / (NeePdf + MaterialEvalPdf);
						}
#endif
						// Record the contribution
						float3 ExitantRadianceSample = Radiance * MaterialThroughput * RayThroughput * MisWeight / (NeePdf * RayPdf);
						Irradiance += isfinite(ExitantRadianceSample) ? ExitantRadianceSample : 0.0;
					}
				}
			}

			// Perform material sampling
			// dxr_todo: only worth doing when Bounce + 1 < BouncesMax
			{
				float3 Direction;
				float3 Throughput = 1.0;
#if 0
				uint DummyVariable;
				float4 RandSample = RandomSequence_GenerateSample4D(RandSequence, DummyVariable);
				SampleMaterial(Ray.Direction, Payload, RandSample, Direction, Throughput, MaterialPdf);
#else
				float3 RayOrigin = Ray.Origin;
				GenerateCosineNormalRay(RayOrigin, Payload.WorldNormal, RandSequence, Ray.Origin, Direction, Ray.TMin, Ray.TMax, MaterialPdf);
				Throughput = Payload.DiffuseColor * MaterialPdf;
#endif
				// #dxr_todo: Degenerate guard?
				if (MaterialPdf <= 0.0)
				{
					break;
				}

				// Update ray
				Ray.Direction = Direction;
				RayThroughput *= Throughput;
				RayPdf *= MaterialPdf;

				// #dxr_todo: Russian roulette?

				// #dxr_todo: Firefly rejection?
			}

			Bounce++;
		}
	}

	float AmbientOcclusion = HitCount;
	if (SamplesPerPixel > 0)
	{
		Irradiance /= SamplesPerPixel;
		AmbientOcclusion /= SamplesPerPixel;
	}

	if (HitCount > 0.0)
	{
		HitDistance /= HitCount;
	}
	else
	{
		HitDistance = -1.0;
	}

	RWGlobalIlluminationUAV[PixelCoord] = float4(Irradiance, AmbientOcclusion);
	RWRayDistanceUAV[PixelCoord] = float2(HitDistance, SamplesPerPixel);
	//RWRayDistanceUAV[PixelCoord] = float2(HitDistance, HitCount);
	// For AO denoiser..
	//RWRayDistanceUAV[PixelCoord] = float2(Luminance(Irradiance), HitDistance);
}

[shader("miss")]
void RayTracingGlobalIlluminationMS(inout FPackedMaterialClosestHitPayload PackedPayload)
{
	PackedPayload.Payload.HitT = -1;
}


[shader("closesthit")]
void RayTracingGlobalIlluminationCHS(inout FPackedMaterialClosestHitPayload PackedPayload, in FDefaultAttributes Attributes)
{
	FMaterialClosestHitPayload Payload = (FMaterialClosestHitPayload)0;
	Payload.HitT = RayTCurrent();

	FTriangleBaseAttributes Triangle = LoadTriangleBaseAttributes(PrimitiveIndex());
	float3 Edge0 = Triangle.LocalPositions[2] - Triangle.LocalPositions[0];
	float3 Edge1 = Triangle.LocalPositions[1] - Triangle.LocalPositions[0];
	float3x3 WorldToLocal = (float3x3)WorldToObject();
	float3x3 LocalToWorldNormal = transpose(WorldToLocal);
	Payload.WorldNormal = normalize(mul(LocalToWorldNormal, cross(Edge0, Edge1)));

	PackedPayload = PackRayTracingPayload(Payload, PackedPayload.RayCone);
}
