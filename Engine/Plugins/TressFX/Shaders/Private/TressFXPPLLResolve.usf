
#define KBUFFER_RESOLVE_PASS 1

#include "/Engine/Private/Common.ush"
#include "/Engine/Private/SHCommon.ush"
#include "TressFXPPLL.ush"

// currently always true because max k-buffer size is 16. if you want a buffer bigger than that you must have unlimited memory
#if (KBUFFER_SIZE <= 16)
	#define ALU_INDEXING 1			// avoids using an indexed array for better performance
#else
	#define ALU_INDEXING 0
#endif

#define MAX_FRAGMENTS 512

#ifndef PPLL_COMPUTE_RESOLVE
	#define PPLL_COMPUTE_RESOLVE 0
#endif

#if ALU_INDEXING

//--------------------------------------------------------------------------------------
// 
// Helper functions for storing the k-buffer into non-indexed registers for better 
// performance. For this code to work, KBUFFER_SIZE must be <= 16.
//
//--------------------------------------------------------------------------------------

uint GetUintFromIndex_Size16(uint4 V03, uint4 V47, uint4 V811, uint4 V1215, uint uIndex)
{
    uint u;
    u = uIndex == 1 ? V03.y : V03.x;
    u = uIndex == 2 ? V03.z : u;
    u = uIndex == 3 ? V03.w : u;
    u = uIndex == 4 ? V47.x : u;
    u = uIndex == 5 ? V47.y : u;
    u = uIndex == 6 ? V47.z : u;
    u = uIndex == 7 ? V47.w : u;
    u = uIndex == 8 ? V811.x : u;
    u = uIndex == 9 ? V811.y : u;
    u = uIndex == 10 ? V811.z : u;
    u = uIndex == 11 ? V811.w : u;
    u = uIndex == 12 ? V1215.x : u;
    u = uIndex == 13 ? V1215.y : u;
    u = uIndex == 14 ? V1215.z : u;
    u = uIndex == 15 ? V1215.w : u;
    return u;
}

void StoreUintAtIndex_Size16(inout uint4 V03, inout uint4 V47, inout uint4 V811, inout uint4 V1215, uint uIndex, uint uValue)
{
    V03.x = (uIndex == 0) ? uValue : V03.x;
    V03.y = (uIndex == 1) ? uValue : V03.y;
    V03.z = (uIndex == 2) ? uValue : V03.z;
    V03.w = (uIndex == 3) ? uValue : V03.w;
    V47.x = (uIndex == 4) ? uValue : V47.x;
    V47.y = (uIndex == 5) ? uValue : V47.y;
    V47.z = (uIndex == 6) ? uValue : V47.z;
    V47.w = (uIndex == 7) ? uValue : V47.w;
    V811.x = (uIndex == 8) ? uValue : V811.x;
    V811.y = (uIndex == 9) ? uValue : V811.y;
    V811.z = (uIndex == 10) ? uValue : V811.z;
    V811.w = (uIndex == 11) ? uValue : V811.w;
    V1215.x = (uIndex == 12) ? uValue : V1215.x;
    V1215.y = (uIndex == 13) ? uValue : V1215.y;
    V1215.z = (uIndex == 14) ? uValue : V1215.z;
    V1215.w = (uIndex == 15) ? uValue : V1215.w;
}


#define GET_DEPTH_AT_INDEX(uIndex) GetUintFromIndex_Size16(kBufferDepthV03, kBufferDepthV47, kBufferDepthV811, kBufferDepthV1215, uIndex)
#define GET_DATA_AT_INDEX( uIndex) GetUintFromIndex_Size16(kBufferDataV03, kBufferDataV47, kBufferDataV811, kBufferDataV1215, uIndex)
#define GET_COLOR_AT_INDEX( uIndex) GetUintFromIndex_Size16(kBufferStrandColorV03, kBufferStrandColorV47, kBufferStrandColorV811, kBufferStrandColorV1215, uIndex)
#define STORE_DEPTH_AT_INDEX(uIndex, uValue) StoreUintAtIndex_Size16(kBufferDepthV03, kBufferDepthV47, kBufferDepthV811, kBufferDepthV1215, uIndex, uValue)
#define STORE_DATA_AT_INDEX(uIndex, uValue) StoreUintAtIndex_Size16(kBufferDataV03, kBufferDataV47, kBufferDataV811, kBufferDataV1215, uIndex, uValue)
#define STORE_COLOR_AT_INDEX(uIndex, uValue) StoreUintAtIndex_Size16(kBufferStrandColorV03, kBufferStrandColorV47, kBufferStrandColorV811, kBufferStrandColorV1215, uIndex, uValue)

#else

//not implemented

#endif //ALU_INDEXING

#define NODE_DATA(x) LinkedListSRV[x].DummyPad
#define NODE_NEXT(x) LinkedListSRV[x].Next
#define NODE_DEPTH(x) LinkedListSRV[x].Depth
#define NODE_COLOR(x) LinkedListSRV[x].Color

bool GatherLinkedList(uint2 vScreenAddress, out float4 FinalColor)
{
    uint pointer = FragmentListHead[vScreenAddress];

    float4 outColor = float4(0, 0, 0, 1);


    if (pointer == FRAGMENT_LIST_NULL)
    {
#if !PPLL_COMPUTE_RESOLVE
        discard;
#else
		FinalColor = outColor;
		return false;
#endif
        FinalColor = outColor;
        return false;
    }


#if ALU_INDEXING

    uint4 kBufferDepthV03, kBufferDepthV47, kBufferDepthV811, kBufferDepthV1215;
    uint4 kBufferDataV03, kBufferDataV47, kBufferDataV811, kBufferDataV1215;
    uint4 kBufferStrandColorV03, kBufferStrandColorV47, kBufferStrandColorV811, kBufferStrandColorV1215;
    kBufferDepthV03 = uint4(asuint(100000.0f), asuint(100000.0f), asuint(100000.0f), asuint(100000.0f));
    kBufferDepthV47 = uint4(asuint(100000.0f), asuint(100000.0f), asuint(100000.0f), asuint(100000.0f));
    kBufferDepthV811 = uint4(asuint(100000.0f), asuint(100000.0f), asuint(100000.0f), asuint(100000.0f));
    kBufferDepthV1215 = uint4(asuint(100000.0f), asuint(100000.0f), asuint(100000.0f), asuint(100000.0f));
    kBufferDataV03 = uint4(0, 0, 0, 0);
    kBufferDataV47 = uint4(0, 0, 0, 0);
    kBufferDataV811 = uint4(0, 0, 0, 0);
    kBufferDataV1215 = uint4(0, 0, 0, 0);
    kBufferStrandColorV03 = uint4(0, 0, 0, 0);
    kBufferStrandColorV47 = uint4(0, 0, 0, 0);
    kBufferStrandColorV811 = uint4(0, 0, 0, 0);
    kBufferStrandColorV1215 = uint4(0, 0, 0, 0);

#else
	//not implemented

#endif

    // Get first K elements.
    for (int p = 0; p < KBUFFER_SIZE; ++p)
    {
        if (pointer != FRAGMENT_LIST_NULL)
        {
            STORE_DEPTH_AT_INDEX(p, NODE_DEPTH(pointer));
            STORE_DATA_AT_INDEX(p, NODE_DATA(pointer));
            STORE_COLOR_AT_INDEX(p, NODE_COLOR(pointer));
            pointer = NODE_NEXT(pointer);
        }
    }

    float4 fcolor = float4(0, 0, 0, 1);

    float3 tailColor;

    ALLOW_UAV_CONDITION
    for (int iFragment = 0; iFragment < MAX_FRAGMENTS && pointer != FRAGMENT_LIST_NULL; ++iFragment)
    {
        if (pointer == FRAGMENT_LIST_NULL)
        {
            break;
        }

        int id = 0;
        float max_depth = 0;

        // find the furthest node in array
        for (int i = 0; i < KBUFFER_SIZE; i++)
        {
            float fDepth = asfloat(GET_DEPTH_AT_INDEX(i));
            if (max_depth < fDepth)
            {
                max_depth = fDepth;
                id = i;
            }
        }


        uint data = NODE_DATA(pointer);
        uint color = NODE_COLOR(pointer);
        uint nodeDepth = NODE_DEPTH(pointer);
        float fNodeDepth = asfloat(nodeDepth);


        // If the node in the linked list is nearer than the furthest one in the local array, exchange the node 
        // in the local array for the one in the linked list.
        if (max_depth > fNodeDepth)
        {
            uint tmp = GET_DEPTH_AT_INDEX(id);
            STORE_DEPTH_AT_INDEX(id, nodeDepth);
            fNodeDepth = asfloat(tmp);

            tmp = GET_DATA_AT_INDEX(id);
            STORE_DATA_AT_INDEX(id, data);
            data = tmp;

            tmp = GET_COLOR_AT_INDEX(id);
            STORE_COLOR_AT_INDEX(id, color);
            color = tmp;

        }

        float4 vData = UnpackUintIntoFloat4(data);
        float4 vColor = UnpackUintIntoFloat4(color);
        float4 fragmentColor = vColor;
        fcolor.xyz = mad(-fcolor.xyz, fragmentColor.w, fcolor.xyz) + fragmentColor.xyz * fragmentColor.w;
        fcolor.w = mad(-fcolor.w, fragmentColor.w, fcolor.w);
			   
        pointer = NODE_NEXT(pointer);
    }

    // Blend the k nearest layers of fragments from back to front, where k = MAX_TOP_LAYERS_EYE
    for (int j = 0; j < KBUFFER_SIZE; j++)
    {
        int id = 0;
        float max_depth = 0;


        // find the furthest node in the array
        for (int i = 0; i < KBUFFER_SIZE; i++)
        {
            float fDepth = asfloat(GET_DEPTH_AT_INDEX(i));
            if (max_depth < fDepth)
            {
                max_depth = fDepth;
                id = i;
            }
        }

        // take this node out of the next search
        uint nodeDepth = GET_DEPTH_AT_INDEX(id);
        uint data = GET_DATA_AT_INDEX(id);
        uint color = GET_COLOR_AT_INDEX(id);

        // take this node out of the next search
        STORE_DEPTH_AT_INDEX(id, 0);

        // Use high quality shading for the nearest k fragments
        float fDepth = asfloat(nodeDepth);
        float4 vData = UnpackUintIntoFloat4(data);
        float4 vColor = UnpackUintIntoFloat4(color);
        float4 fragmentColor = vColor;

        // Blend the fragment color
        fcolor.xyz = mad(-fcolor.xyz, fragmentColor.w, fcolor.xyz) + fragmentColor.xyz * fragmentColor.w;
        fcolor.w = fcolor.w * (1 - fragmentColor.w);
    }
    outColor = fcolor;
    FinalColor = outColor;
    return true;
}


void ResolvePPLL(FScreenVertexOutput Input, out float4 OutColor : SV_Target0)
{
    GatherLinkedList(uint2(Input.Position.xy), OutColor);
}


// compute resolve version

RWTexture2D<float4> SceneColorTex;
float4 TextureSize; //size of the SceneColorTex

#ifndef THREADGROUP_SIZEX
	#define THREADGROUP_SIZEX 32
#endif

#ifndef THREADGROUP_SIZEY
	#define THREADGROUP_SIZEY 32
#endif

[numthreads(THREADGROUP_SIZEX, THREADGROUP_SIZEY, 1)]
void ResolvePPLL_CS(uint2 DispatchThreadId : SV_DispatchThreadID)
{
    uint2 pixelID = uint2(DispatchThreadId.x, DispatchThreadId.y);
    float4 OutColor;
	
	BRANCH
    if (pixelID.x <= TextureSize.x && pixelID.y <= TextureSize.y)
    {
        if (GatherLinkedList(pixelID, OutColor))
        {
            SceneColorTex[pixelID] = (SceneColorTex[pixelID] * OutColor.a) + OutColor;
        }
    }    
}