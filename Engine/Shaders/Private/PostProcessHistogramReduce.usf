// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PostProcessHistogramReduce.usf: PostProcessing combine multiple histograms into a single one
=============================================================================*/

#include "Common.ush"
#include "PostProcessCommon.ush"

// how many lines of histograms should be compiled into one
uint LoopSize;
//
float4 EyeAdapationTemporalParams;
// the last frames eye adaptation settings
Texture2D EyeAdaptationTexture;

Texture2D<int> HistogramTexture;

void MainPS(noperspective float4 UVAndScreenPos : TEXCOORD0, float4 SvPosition: SV_POSITION, out float4 OutColor : SV_Target0)
{
	float2 UV = UVAndScreenPos.xy;

	float4 SceneColor = 0;

	// NOTE: Could do single Buffer.Load4, but UE doesn't support buffers as post process outputs
	int PosX = int(SvPosition.x);
	uint4 HistogramUint = uint4(
		HistogramTexture.Load(int3(PosX * 4 + 0, 0, 0)).x,
		HistogramTexture.Load(int3(PosX * 4 + 1, 0, 0)).x,
		HistogramTexture.Load(int3(PosX * 4 + 2, 0, 0)).x,
		HistogramTexture.Load(int3(PosX * 4 + 3, 0, 0)).x);

	//SceneColor = float4(HistogramUint) * ((1.0 / 64.0) * (1.0 / (8.0 * 8.0)));				// Loopsize = 1x1 (Tile = 16x16)
	SceneColor = float4(HistogramUint) * ((1.0 / 64.0) * (1.0 / (8.0 * 8.0 * 2.0 * 2.0)));		// Loopsize = 2x2 (Tile = 16x16)
	
	[flatten]
	if(SvPosition.y < 1.0f)
	{
		// line 0: histogram
		OutColor = SceneColor / LoopSize;
	}
	else
	{
		// line 1: eye adaptation exposure scale (copied over so we can read the value in EyeAdaptation pass which is writing to eye adaptation)

		// second line first pixel in the texture has the ExposureScale from last frame
		float OldExposureScale = EyeAdaptationTexture.Load(int3(0, 0, 0)).x;

		OutColor = OldExposureScale;
	}
}