// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#pragma once

//------------------------------------------------------- COMPILER CONFIG

// Generate vector truncation warnings to errors.
#pragma warning(error: 3206)


//------------------------------------------------------- DEBUG CONFIG

/** Turn on/off tile classfication for debugging purpose. */
#define DEBUG_ENABLE_TILE_CLASSIFICATION 1

/** Should output invalid data when know there is a need. */
// TODO: there is an artifact in temporal reprojection.
#define DEBUG_WASTFUL_OUTPUT 1

/** Force the signal to a specific mip level. */
#define DEBUG_MIP_LEVEL -1

/** Debuging mode. */
	#define DEBUG_MODE_DISABLED -1
	#define DEBUG_MODE_BRUTE_FORCE_ONLY 0
	#define DEBUG_MODE_FAST_ONLY 1
#define DEBUG_MODE DEBUG_MODE_DISABLED

/** DIsable any bilateral rejection. */
#define DEBUG_DISABLE_BILATERAL 0

/** Prefer to store normalized components in internal texture. */
#define DEBUG_STORE_NORMALIZED_COMPONENTS 1


//------------------------------------------------------- SHARED CONFIG

/** Do normal based anysotropy. */
#define CONFIG_NORMAL_ANISOTROPY 1


//------------------------------------------------------- SHARED CONSTANTS

// Maximum number of mip level supported.
#define MAX_MIP_LEVEL_COUNT 4

#define TARGETED_SAMPLE_COUNT 1024

// This constant is to artificially store the signal into higher resolution that theorically should from
// the infered bluring radius by deviding it. 1.0 means nothing happen, but in practice want this >=
// than Nyquist's 2.0 multiplier. Uses 3.0 because this is the size of the 3x3 neighborhood kernel.
#define BLURING_ESTIMATION_MULTIPLIER 3.0

// World bluring radius for a miss.
#define WORLD_RADIUS_INVALID -1
#define WORLD_RADIUS_MISS 1.#INF

// Mip level for sample that are invalid or missed.
#define MIP_LEVEL_INVALID -1
#define MIP_LEVEL_MISS 1024


//------------------------------------------------------- ENUMS

/** Layouts of the signal buffer. */
	/** Buffer layout for the shadow penumbra given as input. */
	#define SIGNAL_BUFFER_LAYOUT_PENUMBRA_INPUT 0

	/** Internal buffer layout for the shadow penumbra. */
	#define SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL 1

	/** Internal buffer layout used for history rejection for the shadow penumbra. */
	#define SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY_REJECTION 2

	/** Buffer layout taken as input by */ // TODO: unused, remove it.
	// #define SIGNAL_BUFFER_LAYOUT_PENUMBRA_OUTPUT 3

	/** Buffer layout for the reflection given by the ray generation shader. */
	#define SIGNAL_BUFFER_LAYOUT_REFLECTIONS_INPUT 3

	/** Buffer layout for the reflection output. */
	#define SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY 4


/** Defines how the signal is being processed. Matches C++'s ESignalProcessing. */
	/** Scene color anti aliasing processing. */
	//#define SIGNAL_PROCESSING_COLORAA 0

	/** Depth of field stabilization processing. */
	//#define SIGNAL_PROCESSING_DOF 1

	/** Shadow penumbra denoising. */
	#define SIGNAL_PROCESSING_PENUMBRA 0

	/** Shadow penumbra denoising. */
	//#define SIGNAL_PROCESSING_DIFUSE_GI 3

	/** Reflection denoising. */
	#define SIGNAL_PROCESSING_REFLECTIONS 1


/** Light types */
	#define LIGHT_TYPE_DIRECTIONAL 0
	#define LIGHT_TYPE_POINT 1
	#define LIGHT_TYPE_SPOT 2
	#define LIGHT_TYPE_RECT 3
