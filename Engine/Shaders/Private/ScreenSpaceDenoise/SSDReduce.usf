// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
SSDReduce.usf:
=============================================================================*/

#include "../MonteCarlo.ush"
#include "SSDSignalCore.ush"

#define CONFIG_SIGNAL_PROCESSING SIGNAL_PROCESSING_PENUMBRA
#include "SSDSignalInterface.ush"


//------------------------------------------------------- CONFIGS

#define TILE_PIXEL_SIZE 8

#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
	#define CONFIG_SIGNAL_INPUT_LAYOUT		SIGNAL_BUFFER_LAYOUT_PENUMBRA_INPUT
	#define CONFIG_SIGNAL_OUTPUT_LAYOUT		SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL

#else
	#error Unknown signal processing

#endif 


//------------------------------------------------------- PARAMETERS

Texture2D SignalInput0;
Texture2D SignalInput1;

RWTexture2D<float4>	SignalOutput0Mip0;
RWTexture2D<float4>	SignalOutput1Mip0;
RWTexture2D<float4>	SignalOutput0Mip1;
RWTexture2D<float4>	SignalOutput1Mip1;
RWTexture2D<float4>	SignalOutput0Mip2;
RWTexture2D<float4>	SignalOutput1Mip2;
RWTexture2D<float4>	SignalOutput0Mip3;
RWTexture2D<float4>	SignalOutput1Mip3;

RWTexture2D<uint> TileClassificationOutput;

RWTexture2D<float4>	DebugOutput;


//------------------------------------------------------- LDS

#define GROUP_SIZE ((TILE_PIXEL_SIZE) * (TILE_PIXEL_SIZE))


#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA

groupshared uint SharedMipMask;
groupshared uint SharedMissedRayCount;
groupshared uint SharedInvalidRayCount;

groupshared float2 SharedArray0[GROUP_SIZE];

#endif // CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA


//------------------------------------------------------- FUNCTIONS

/** Output signal to a mip level. */
void OutputSignalMip(const uint MipLevel, const uint2 PixelPosition, FSSFSignalSample Sample)
{
	if (MipLevel == 0)
	{
		OutputSignal(SignalOutput0Mip0, SignalOutput1Mip0, CONFIG_SIGNAL_OUTPUT_LAYOUT, PixelPosition, Sample);
	}
	else if (MipLevel == 1)
	{
		OutputSignal(SignalOutput0Mip1, SignalOutput1Mip1, CONFIG_SIGNAL_OUTPUT_LAYOUT, PixelPosition, Sample);
	}
	else if (MipLevel == 2)
	{
		OutputSignal(SignalOutput0Mip2, SignalOutput1Mip2, CONFIG_SIGNAL_OUTPUT_LAYOUT, PixelPosition, Sample);
	}
	else if (MipLevel == 3)
	{
		OutputSignal(SignalOutput0Mip3, SignalOutput1Mip3, CONFIG_SIGNAL_OUTPUT_LAYOUT, PixelPosition, Sample);
	}
}

/** Output a constant penumbra to */
void OutputConstantPenumbra(uint2 GroupId, uint GroupThreadIndex, uint TileMode)
{
	for (uint MipLevel = 0; MipLevel < MAX_MIP_LEVEL_COUNT; MipLevel++)
	{
		const uint GroupSize = (TILE_PIXEL_SIZE >> MipLevel);
		const uint NeighborSize = TILE_PIXEL_SIZE / GroupSize;

		const uint2 OutputOffset = uint2(GroupThreadIndex % GroupSize, GroupThreadIndex / GroupSize);

		// Disable the lane if useless for the reduction.
		BRANCH
		if (OutputOffset.y >= GroupSize)
		{
			continue;
		}

		uint2 OutputPixelPosition = GroupId * GroupSize + OutputOffset;

		FSSFSignalSample OutputSample = GetConstantSignalSample(TileMode);
		if (TileMode == TILE_MODE_FULLY_OCCLUDED && MipLevel != 0)
		{
			OutputSample = GetConstantSignalSample(TILE_MODE_FULLY_UNSURE);
		}

		OutputSignalMip(MipLevel, OutputPixelPosition, Mul(OutputSample, 1 << (2 * MipLevel)));
	}
}


//------------------------------------------------------- ENTRY POINTS

[numthreads(TILE_PIXEL_SIZE, TILE_PIXEL_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Supose have at most 1spp.
	const float AccumulatedSampleCount = 1;

	// Init atomic.
	{
		if (GroupThreadIndex == 0)
		{
			SharedMissedRayCount = 0;
			SharedInvalidRayCount = 0;
			SharedMipMask = 0;
		}

		GroupMemoryBarrierWithGroupSync();
	}

	// Find out scene buffer UV.
	float2 SceneBufferUV = (DispatchThreadId + 0.5 + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}
	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);

	// Fetch input signal.
	FSSFSignalSample InputSample;
	FSSFSampleSceneInfos SceneMetadata;
	{
		InputSample = SampleInputSignal(
			SignalInput0, SignalInput1,
			GlobalPointClampedSampler,
			CONFIG_SIGNAL_INPUT_LAYOUT,
			SceneBufferUV);
		SceneMetadata = FetchCurrentSceneInfos(ScreenPosition, SceneBufferUV);
	}

	// Compute some derived information about the sample.
	float SignalWorldBlurRadius = GetSignalWorldBluringRadius(InputSample, SceneMetadata);
	float SignalMipLevel = ComputeSignalMipLevel(SceneMetadata, SignalWorldBlurRadius);

	DebugOutput[DispatchThreadId] = float4(
		SignalWorldBlurRadius,
		SignalMipLevel,
		0,
		0);

	float PixelWorldBluringRadius = ComputePixelWorldRadius(SceneMetadata);

	// Early tile classify.
	FSSFTileInfos TileInfos = CreateTileInfos();
	TileInfos.TileMode = TILE_MODE_FAST;
	{
		// Atomic add the number of missed and invalid samples.
		{
			uint Unused;
			InterlockedAdd(SharedMissedRayCount, IsMissSample(InputSample) ? 1 : 0, Unused);
		}
		{
			uint Unused;
			InterlockedAdd(SharedInvalidRayCount, IsInvalidSample(InputSample) ? 1 : 0, Unused);
		}

		// Generate the shared mip level mask.
		if (SignalMipLevel != MIP_LEVEL_INVALID && SignalMipLevel != MIP_LEVEL_MISS)
		{
			float FloorMipLevel = floor(SignalMipLevel);
			uint SampleMipLevelMask = 0xF & (((FloorMipLevel != SignalMipLevel) ? 0x3 : 0x1) << uint(FloorMipLevel));

			uint Unused;
			InterlockedOr(SharedMipMask, SampleMipLevelMask, Unused);
		}

		GroupMemoryBarrierWithGroupSync();

		// Early return if tile is fully lighted or occluded.
		if (DEBUG_ENABLE_TILE_CLASSIFICATION && DEBUG_MODE != DEBUG_MODE_BRUTE_FORCE_ONLY)
		{
			FLATTEN
			if (SharedInvalidRayCount == TILE_PIXEL_SIZE * TILE_PIXEL_SIZE)
			{
				TileInfos.TileMode = TILE_MODE_FULLY_INVALID;
			}
			else if (SharedMissedRayCount + SharedInvalidRayCount == TILE_PIXEL_SIZE * TILE_PIXEL_SIZE)
			{
				TileInfos.TileMode = TILE_MODE_FULLY_LIGHTED;
			}
			else if (SharedMissedRayCount == 0)
			{
				TileInfos.TileMode = TILE_MODE_FULLY_OCCLUDED;
			}
		}
		
		UNROLL
		for (uint MipLevel = 0; MipLevel < MAX_MIP_LEVEL_COUNT; MipLevel++)
		{
			TileInfos.bProcessMipLevel[MipLevel] = (SharedMipMask & (1 << MipLevel)) != 0;
		}
	}

	// Output the different mip levels.
	BRANCH
	if (TileInfos.TileMode == TILE_MODE_FULLY_INVALID)
	{
		OutputConstantPenumbra(GroupId, GroupThreadIndex, TILE_MODE_FULLY_INVALID);
	}
	else if (TileInfos.TileMode == TILE_MODE_FULLY_LIGHTED)
	{
		OutputConstantPenumbra(GroupId, GroupThreadIndex, TILE_MODE_FULLY_LIGHTED);
	}
	// TODO: investigate TILE_MODE_FULLY_OCCLUDED here.
	else
	{
		SharedArray0[GroupThreadIndex] = float2(
			SignalMipLevel,
			SceneMetadata.WorldDepth);
		GroupMemoryBarrierWithGroupSync();

		bool bNeedsBruteForce = false;

		UNROLL
		for (uint MipLevel = 1; MipLevel < MAX_MIP_LEVEL_COUNT; MipLevel++)
		{
			const uint MipLevelPow2 = 1 << MipLevel;
			const uint MipGroupSize = (TILE_PIXEL_SIZE >> MipLevel);

			uint2 OutputOffset = uint2(GroupThreadIndex % MipGroupSize, GroupThreadIndex / MipGroupSize);
		
			// Disable the lane if useless for the reduction.
			BRANCH
			if (OutputOffset.y >= MipGroupSize)
			{
				continue;
			}

			float2 NeighborGroupBufferUV = (GroupId * TILE_PIXEL_SIZE + (OutputOffset + 0.5) * MipLevelPow2) * View.BufferSizeAndInvSize.zw;

			float2 NeighborGroupViewportUV = BufferUVToViewportUV(NeighborGroupBufferUV);
			float2 NeighborGroupScreenPosition = ViewportUVToScreenPos(NeighborGroupViewportUV);
			FSSFSampleSceneInfos NeighborGroupSceneMetadata = FetchCurrentSceneInfos(NeighborGroupScreenPosition, NeighborGroupBufferUV);

			float NeighborGroupWorldBluringRadius = ComputePixelWorldRadius(NeighborGroupSceneMetadata);

			float ArrivingRayCount = 0;
			float LeavingRayCount = 0;
			float UncertainRayCount = 0;

			LOOP for (uint x = 0; x < MipLevelPow2; x++)
			LOOP for (uint y = 0; y < MipLevelPow2; y++)
			{
				FSSFSampleSceneInfos NeighborMetadata;
				float NeighborMipLevel;

				{
					uint2 SampleGroupPos = OutputOffset * MipLevelPow2 + uint2(x, y);

					float2 NeighborBufferUV = ((GroupId * TILE_PIXEL_SIZE + SampleGroupPos) + 0.5) * View.BufferSizeAndInvSize.zw;

					float2 NeighborViewportUV = BufferUVToViewportUV(NeighborBufferUV);
					float2 NeighborScreenPosition = ViewportUVToScreenPos(NeighborViewportUV);

					// Access LDS.
					{
						uint LDSIndex = dot(SampleGroupPos, uint2(1, TILE_PIXEL_SIZE));

						NeighborMipLevel = SharedArray0[LDSIndex].x;
						float NeighborDepth = SharedArray0[LDSIndex].y;
						float3 NeighborNormal = float3(0, 0, 1);
						float Roughness = 1;

						NeighborMetadata = InitSampleSceneInfos(
							View.ScreenToTranslatedWorld,
							NeighborScreenPosition, NeighborDepth, NeighborNormal, Roughness);
					}
				}

				float NeighborWorldBluringRadius = ComputePixelWorldRadius(NeighborMetadata);

				// Compute the bilateral weight.
				float BilateralWeight = MipLevel == 0 ? 1 : ComputeBilateralWeight(
					WorldBluringRadiusToBilateralWorldDistance(MipLevelPow2 * min(NeighborGroupWorldBluringRadius, NeighborWorldBluringRadius)),
					NeighborGroupSceneMetadata,
					NeighborMetadata);

				if (NeighborMipLevel != MIP_LEVEL_INVALID)
				{
					const float AccumulatedSampleCount = 1;
					float IsComingFromHigherMip = MipLevel == 0 ? 1.0 : saturate(NeighborMipLevel - (MipLevel - 1));
					//float IsGoingToLowerMip = NeighborMipLevel == MIP_LEVEL_MISS ? 1 : 0;
					float IsGoingToLowerMip = saturate(NeighborMipLevel - MipLevel);

					if (BilateralWeight > 0 && MipLevel != 0)
					{
						ArrivingRayCount += AccumulatedSampleCount * IsComingFromHigherMip;
						LeavingRayCount += AccumulatedSampleCount * IsComingFromHigherMip * IsGoingToLowerMip;
						UncertainRayCount += AccumulatedSampleCount * (1 - IsComingFromHigherMip);
					}
					else
					{
						bNeedsBruteForce = bNeedsBruteForce || (IsComingFromHigherMip > 0);
					}
				}
			}

			uint2 OutputPixelPosition = GroupId * MipGroupSize + OutputOffset;

			FSSFSignalSample OutputSample = CreateSignalSample();
			OutputSample.AccumulatedSampleCount = ArrivingRayCount;
			OutputSample.LeavingRayCount = LeavingRayCount;
			OutputSample.UncertainRayCount = UncertainRayCount;
			OutputSignalMip(MipLevel, OutputPixelPosition, OutputSample);
		} // for (uint MipLevel = 1; MipLevel < MAX_MIP_LEVEL_COUNT; MipLevel++)

		if (bNeedsBruteForce)
		{
			uint Unused;
			InterlockedOr(SharedMipMask, 0x10, Unused);
		}

		GroupMemoryBarrierWithGroupSync();

		bool bBruteForceThisTile = ((SharedMipMask & 0x10) != 0 || DEBUG_MODE == DEBUG_MODE_BRUTE_FORCE_ONLY) && (DEBUG_MODE != DEBUG_MODE_FAST_ONLY);
		if (bBruteForceThisTile)
			TileInfos.TileMode = TILE_MODE_BRUTE_FORCE;

		// Output mip level 0
		{
			const uint MipLevel = 0;

			// Load tile from LDS to reduce VGPR pressure when outputing lower mip levels.
			float SignalMipLevel = SharedArray0[GroupThreadIndex].x;

			// Compute output pixel position with GroupId and GroupThreadIndex to not increase VGPR pressure when outputing lower mips.
			uint2 OutputPixelPosition = GroupId * TILE_PIXEL_SIZE + uint2(GroupThreadIndex % TILE_PIXEL_SIZE, GroupThreadIndex / TILE_PIXEL_SIZE);

			FSSFSignalSample OutputSample = CreateSignalSample();
			OutputSample.AccumulatedSampleCount = AccumulatedSampleCount;
			if (SignalMipLevel == MIP_LEVEL_INVALID)
			{
				OutputSample = GetConstantSignalSample(TILE_MODE_FULLY_INVALID);
			}
			else if (SignalMipLevel == MIP_LEVEL_MISS)
			{
				OutputSample.LeavingRayCount = OutputSample.AccumulatedSampleCount;
			}
			else if (bBruteForceThisTile)
			{
				// Eitehr the ray is miss, or hit.
				// TODO: Supose 1spp. No translucency support.
				OutputSample.LeavingRayCount = 0;
			}
			else
			{
				OutputSample.LeavingRayCount = OutputSample.AccumulatedSampleCount * saturate(SignalMipLevel - MipLevel);
			}
			OutputSignalMip(MipLevel, OutputPixelPosition, OutputSample);
		}
	}


	if (TileInfos.TileMode == TILE_MODE_FULLY_LIGHTED)
	{
		OutputConstantPenumbra(GroupId, GroupThreadIndex, TILE_MODE_FULLY_LIGHTED);
	}

	// Output tile classification buffer.
	if (GroupThreadIndex == 0)
	{
		WriteTileInfos(TileClassificationOutput, GroupId, TileInfos);
	}
}
