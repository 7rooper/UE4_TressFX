// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "../Common.ush"
#include "../MonteCarlo.ush"
#include "../DeferredShadingCommon.ush"
#include "../ShadingModels.ush"
#include "SkyLightMipTreeCommon.ush"
#include "RayTracingCommon.ush"
#include "RayTracingDirectionalLight.ush"
#include "RayTracingRectLight.ush"

RaytracingAccelerationStructure TLAS;
RWTexture2D<float4> RWOcclusionMaskUAV;
RWTexture2D<float> RWRayDistanceUAV;

#define USE_MIP_PDF_TEXTURE 1
#define USE_SOLID_ANGLE_TEXTURE 1

uint CalcLinearIndex(uint2 PixelCoord)
{
	return PixelCoord.y * View.BufferSizeAndInvSize.x + PixelCoord.x;
}

uint SelectFace(uint MipCount, inout RandomSequence RandSequence, out float FacePdf)
{
	uint BufferOffset = BufferOffsetAtPixel(uint2(0, 0), MipCount, SkyLight.MipDimensions);

	float FaceCdf[6];
	FaceCdf[0] = SkyLight.MipTreePosX[BufferOffset];
	FaceCdf[1] = FaceCdf[0] + SkyLight.MipTreeNegX[BufferOffset];
	FaceCdf[2] = FaceCdf[1] + SkyLight.MipTreePosY[BufferOffset];
	FaceCdf[3] = FaceCdf[2] + SkyLight.MipTreeNegY[BufferOffset];
	FaceCdf[4] = FaceCdf[3] + SkyLight.MipTreePosZ[BufferOffset];
	FaceCdf[5] = FaceCdf[4] + SkyLight.MipTreeNegZ[BufferOffset];
	float Sum = FaceCdf[5];

	for (uint Index = 0; Index < 5; ++Index)
	{
		FaceCdf[Index] /= Sum;
	}
	FaceCdf[5] = 1.0;

	// Draw random variable
	uint DummyVariable;
	float RandSample = RandomSequence_GenerateSample1D(RandSequence, DummyVariable);

	// Determine CDF entry
	uint FaceIndex = 0;
	while (RandSample > FaceCdf[FaceIndex])
	{
		FaceIndex++;
	}

	// Calculate PDF and return entry
	FacePdf = FaceCdf[FaceIndex];
	if (FaceIndex > 0)
		FacePdf -= FaceCdf[FaceIndex - 1];
	return FaceIndex;
}

float4 SampleMipTree(uint FaceIndex, uint4 BufferOffset)
{
	float4 Values;
	if (FaceIndex == 0)
	{
		Values.x = SkyLight.MipTreePosX[BufferOffset.x];
		Values.y = SkyLight.MipTreePosX[BufferOffset.y];
		Values.z = SkyLight.MipTreePosX[BufferOffset.z];
		Values.w = SkyLight.MipTreePosX[BufferOffset.w];
	}
	else if (FaceIndex == 1)
	{
		Values.x = SkyLight.MipTreeNegX[BufferOffset.x];
		Values.y = SkyLight.MipTreeNegX[BufferOffset.y];
		Values.z = SkyLight.MipTreeNegX[BufferOffset.z];
		Values.w = SkyLight.MipTreeNegX[BufferOffset.w];
	}
	else if (FaceIndex == 2)
	{
		Values.x = SkyLight.MipTreePosY[BufferOffset.x];
		Values.y = SkyLight.MipTreePosY[BufferOffset.y];
		Values.z = SkyLight.MipTreePosY[BufferOffset.z];
		Values.w = SkyLight.MipTreePosY[BufferOffset.w];
	}
	else if (FaceIndex == 3)
	{
		Values.x = SkyLight.MipTreeNegY[BufferOffset.x];
		Values.y = SkyLight.MipTreeNegY[BufferOffset.y];
		Values.z = SkyLight.MipTreeNegY[BufferOffset.z];
		Values.w = SkyLight.MipTreeNegY[BufferOffset.w];
	}
	else if (FaceIndex == 4)
	{
		Values.x = SkyLight.MipTreePosZ[BufferOffset.x];
		Values.y = SkyLight.MipTreePosZ[BufferOffset.y];
		Values.z = SkyLight.MipTreePosZ[BufferOffset.z];
		Values.w = SkyLight.MipTreePosZ[BufferOffset.w];
	}
	else
	{
		Values.x = SkyLight.MipTreeNegZ[BufferOffset.x];
		Values.y = SkyLight.MipTreeNegZ[BufferOffset.y];
		Values.z = SkyLight.MipTreeNegZ[BufferOffset.z];
		Values.w = SkyLight.MipTreeNegZ[BufferOffset.w];
	}

	return Values;
}

// #dxr_todo: Copied from PathTracingSkyLight.ush
float3 EvalSkyLight(float3 Direction)
{
	return SkyLight.Color * TextureCubeSampleLevel(SkyLight.Texture, SkyLight.TextureSampler, Direction, 0).rgb;
}

float PdfFace(uint MipCount, uint FaceIndex)
{
	// Build Cdf
	uint BufferOffset = BufferOffsetAtPixel(uint2(0, 0), MipCount, SkyLight.MipDimensions);

	float FaceCdf[6];
	FaceCdf[0] = SkyLight.MipTreePosX[BufferOffset];
	FaceCdf[1] = FaceCdf[0] + SkyLight.MipTreeNegX[BufferOffset];
	FaceCdf[2] = FaceCdf[1] + SkyLight.MipTreePosY[BufferOffset];
	FaceCdf[3] = FaceCdf[2] + SkyLight.MipTreeNegY[BufferOffset];
	FaceCdf[4] = FaceCdf[3] + SkyLight.MipTreePosZ[BufferOffset];
	FaceCdf[5] = FaceCdf[4] + SkyLight.MipTreeNegZ[BufferOffset];
	float Sum = FaceCdf[5];

	for (uint Index = 0; Index < 5; ++Index)
	{
		FaceCdf[Index] /= Sum;
	}
	FaceCdf[5] = 1.0;

	float Pdf = FaceCdf[FaceIndex];
	if (FaceIndex > 0)
		Pdf -= FaceCdf[FaceIndex - 1];
	return Pdf;
}

float SampleMipPdf(uint3 TextureCoord, uint StopLevel)
{
	float MipPdf = 1.0;
	uint BufferOffset = BufferOffsetAtPixel(TextureCoord.xy, StopLevel, SkyLight.MipDimensions);
	if (TextureCoord.z == 0)
	{
		MipPdf = SkyLight.MipTreePdfPosX[BufferOffset];
	}
	else if (TextureCoord.z == 1)
	{
		MipPdf = SkyLight.MipTreePdfNegX[BufferOffset];
	}
	else if (TextureCoord.z == 2)
	{
		MipPdf = SkyLight.MipTreePdfPosY[BufferOffset];
	}
	else if (TextureCoord.z == 3)
	{
		MipPdf = SkyLight.MipTreePdfNegY[BufferOffset];
	}
	else if (TextureCoord.z == 4)
	{
		MipPdf = SkyLight.MipTreePdfPosZ[BufferOffset];
	}
	else // if (TextureCoord.z == 5)
	{
		MipPdf = SkyLight.MipTreePdfNegZ[BufferOffset];
	}
	return MipPdf;
}

float PdfSkyLightOcclusionRay(
	float3 WorldNormal,
	float3 WorldDirection
)
{
	// Determine primary direction
	uint MipCount = Log2(SkyLight.MipDimensions.x);
	uint2 TextureRes;
	SkyLight.Texture.GetDimensions(TextureRes.x, TextureRes.y);
	uint3 TextureCoord = GetTextureCubeCoordinate(WorldDirection, TextureRes);
	float2 TextureUV = TextureCoord.xy / (float2)TextureRes;
	uint2 MipCoord = TextureUV * SkyLight.MipDimensions;
	float FacePdf = PdfFace(MipCount, TextureCoord.z);

	// #dxr_todo: StopLevel can be customized for run-time performance
	uint StopLevel = min(SkyLight.SamplingStopLevel, MipCount);
#if USE_MIP_PDF_TEXTURE
	float MipPdf = SampleMipPdf(uint3(MipCoord, TextureCoord.z), StopLevel);

#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipCoord, StopLevel, SkyLight.MipDimensions);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipCoord, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif
	return FacePdf * MipPdf * AreaPdf;
#else
	uint2 MipPixel = 0;
	float MipPdf = 1.0;
	for (uint Index = 0; Index < MipCount - StopLevel; ++Index)
	{
		// Build Cdf
		uint MipIndex = MipCount - Index - 1;
#if USE_MORTON_CODE
		uint BufferOffset = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		uint4 BufferOffsets = uint4(BufferOffset, BufferOffset + 1, BufferOffset + 2, BufferOffset + 3);
#else
		uint4 BufferOffsets;
		BufferOffsets.x = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		BufferOffsets.y = BufferOffsetAtPixel(MipPixel + uint2(1, 0), MipIndex, SkyLight.MipDimensions);
		BufferOffsets.z = BufferOffsetAtPixel(MipPixel + uint2(0, 1), MipIndex, SkyLight.MipDimensions);
		BufferOffsets.w = BufferOffsetAtPixel(MipPixel + uint2(1, 1), MipIndex, SkyLight.MipDimensions);
#endif
		float4 Cdf = SampleMipTree(TextureCoord.z, BufferOffsets);
		Cdf.y += Cdf.x;
		Cdf.z += Cdf.y;
		Cdf.w += Cdf.z;
		Cdf /= Cdf.w;

		// Determine texel choice
		uint2 MipOffset = (MipCoord.xy >> MipIndex) - MipPixel;
		uint LinearIndex = MipOffset.y << 1 | MipOffset.x;
		MipPdf *= LinearIndex > 0 ? Cdf[LinearIndex] - Cdf[LinearIndex - 1] : Cdf[LinearIndex];
		MipPixel += MipOffset;

		MipPixel = MipPixel << 1;
	}
	MipPdf = max(MipPdf, 0.0);
	// DEBUG: assert that SampleMipPdf is equivalent for evaluating the decision tree..
	//MipPdf = SampleMipPdf(uint3(MipCoord, TextureCoord.z), StopLevel);

#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipCoord, StopLevel, SkyLight.MipDimensions);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipCoord, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif
	return FacePdf * MipPdf * AreaPdf;
#endif
}

bool GenerateSkyLightOcclusionRay(
	float3 WorldPosition,
	float3 WorldNormal,
	inout RandomSequence RandSequence,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Determine the appropriate face to use
	uint MipCount = Log2(SkyLight.MipDimensions.x);
	float FacePdf = 0.0;
	uint FaceIndex = SelectFace(MipCount, RandSequence, FacePdf);

	uint2 MipPixel = 0;
	float MipPdf = 1.0;
	uint StopLevel = min(SkyLight.SamplingStopLevel, MipCount);
	for (uint Index = 0; Index < MipCount - StopLevel; ++Index)
	{
		uint MipIndex = MipCount - Index - 1;
#if USE_MORTON_CODE
		uint BufferOffset = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		uint4 BufferOffsets = uint4(BufferOffset, BufferOffset + 1, BufferOffset + 2, BufferOffset + 3);
#else
		uint4 BufferOffsets;
		BufferOffsets.x = BufferOffsetAtPixel(MipPixel, MipIndex, SkyLight.MipDimensions);
		BufferOffsets.y = BufferOffsetAtPixel(MipPixel + uint2(1, 0), MipIndex, SkyLight.MipDimensions);
		BufferOffsets.z = BufferOffsetAtPixel(MipPixel + uint2(0, 1), MipIndex, SkyLight.MipDimensions);
		BufferOffsets.w = BufferOffsetAtPixel(MipPixel + uint2(1, 1), MipIndex, SkyLight.MipDimensions);
#endif
		float4 Cdf = SampleMipTree(FaceIndex, BufferOffsets);
		Cdf.y += Cdf.x;
		Cdf.z += Cdf.y;
		Cdf.w += Cdf.z;
		Cdf /= Cdf.w;

		uint DummyVariable;
		float RandSample = RandomSequence_GenerateSample1D(RandSequence, DummyVariable);
		if (RandSample < Cdf.x)
		{
			MipPdf *= Cdf.x;
		}
		else if (RandSample < Cdf.y)
		{
			MipPdf *= Cdf.y - Cdf.x;
			MipPixel.x += 1;
		}
		else if (RandSample < Cdf.z)
		{
			MipPdf *= Cdf.z - Cdf.y;
			MipPixel.y += 1;
		}
		else // if (RandSample < Cdf.w)
		{
			MipPdf *= Cdf.w - Cdf.z;
			MipPixel += 1;
		}

		MipPixel = uint2(MipPixel.x << 1, MipPixel.y << 1);
	}
	MipPixel = uint2(MipPixel.x >> 1, MipPixel.y >> 1);

	// DEBUG: assert cached PDF is equivalent to re-evaluation
	//MipPdf = PdfSkyLightOcclusionRay(WorldNormal, RayDirection);

	uint DummyVariable;
	float2 PixelOffset = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);
	float2 MipPixelUV = (MipPixel + PixelOffset) / float2(DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));

	// Construct Cubemap coordinate
	uint2 TextureDimensions;
	SkyLight.Texture.GetDimensions(TextureDimensions.x, TextureDimensions.y);
	float3 TexelCoord = float3(MipPixelUV * TextureDimensions, FaceIndex);

	// Determine area pdf
#if USE_SOLID_ANGLE_TEXTURE
	uint LinearIndex = BufferOffsetAtPixel(MipPixel, StopLevel, SkyLight.MipDimensions);
	float AreaPdf = SkyLight.SolidAnglePdf[LinearIndex];
#else
	float AreaPdf = 1.0 / TexelCoordSolidAngle(MipPixel, DimensionsAtLevel(SkyLight.MipDimensions, StopLevel));
#endif

	RayOrigin = WorldPosition + WorldNormal * 0.01;
	RayDirection = normalize(GetTextureCubeVector(TexelCoord, TextureDimensions));
	RayTMin = 0.0;
	RayTMax = 1.0e27;
	RayPdf = FacePdf * MipPdf * AreaPdf;

	return true;
}

float PdfLambertOcclusionRay(
	float3 WorldNormal,
	float3 WorldDirection
)
{
	float Pdf = max(dot(WorldDirection, WorldNormal), 0.0) / PI;
	return Pdf;
}

bool GenerateLambertOcclusionRay(
	float3 WorldPosition,
	float3 WorldNormal,
	inout RandomSequence RandSequence,
	out float3 RayOrigin,
	out float3 RayDirection,
	out float RayTMin,
	out float RayTMax,
	out float RayPdf
)
{
	// Draw random variable
	float2 BufferSize = View.BufferSizeAndInvSize.xy;
	uint DummyVariable;
	float2 RandSample = RandomSequence_GenerateSample2D(RandSequence, DummyVariable);

	// Perform cosine-hemispherical sampling and convert to world-space
	float4 Direction_Tangent = CosineSampleHemisphere(RandSample);
	float3 Direction_World = TangentToWorld(Direction_Tangent.xyz, WorldNormal);

	RayOrigin = WorldPosition + WorldNormal * 0.01;
	RayDirection = Direction_World;
	RayTMin = 0.0;
	RayTMax = 1.0e27;
	RayPdf = Direction_Tangent.w;

	return true;
}

[shader("raygeneration")]
void SkyLightRGS()
{
	uint2 PixelCoord = DispatchRaysIndex().xy;

	RandomSequence RandSequence;
	uint LinearIndex = CalcLinearIndex(PixelCoord);
	RandomSequence_Initialize(RandSequence, LinearIndex, View.FrameNumber * SkyLight.SamplesPerPixel);
	//RandSequence.Type = 2;

	// Get G-Buffer surface data
	float2 InvBufferSize = View.BufferSizeAndInvSize.zw;
	float2 UV = (float2(PixelCoord) + 0.5) * InvBufferSize;
	FScreenSpaceData ScreenSpaceData = GetScreenSpaceData(UV);
	FGBufferData GBuffer = ScreenSpaceData.GBuffer;
	float Depth = ScreenSpaceData.GBuffer.Depth;
	float3 WorldPosition = ReconstructWorldPositionFromDepth(UV, Depth);
	float3 CameraOrigin = ReconstructWorldPositionFromDepth(UV, 0.0f);
	float3 CameraDirection = normalize(WorldPosition - CameraOrigin);
	float3 WorldNormal = ScreenSpaceData.GBuffer.WorldNormal;
	float3 BaseColor = ScreenSpaceData.GBuffer.BaseColor;
	float3 DiffuseColor = ScreenSpaceData.GBuffer.DiffuseColor;
	float3 SpecularColor = ScreenSpaceData.GBuffer.SpecularColor;
	float Roughness = ScreenSpaceData.GBuffer.Roughness;

	float RayDistance = 0.0;
	float HitCount = 0.0;
	uint SamplesPerPixel = SkyLight.SamplesPerPixel;

	// Mask out depth values at or beyond far plane
	if (Depth >= SCENE_TEXTURES_DISABLED_SCENE_DEPTH_VALUE)
	{
		SamplesPerPixel = 0.0;
	}

	float3 ExitantRadiance = 0.0;
	float3 DiffuseExitantRadiance = 0.0;
	for (uint SampleIndex = 0; SampleIndex < SamplesPerPixel; ++SampleIndex)
	{
		RayDesc Ray;
		float RayPdf = 0.0;

		// Determine sky light or lambert ray
		uint DummyVariable;
		float RandSample = RandomSequence_GenerateSample1D(RandSequence, DummyVariable);
		// #dxr_todo: Should strategy selection be driven by CVar?
		float SkyLightSamplingStrategyPdf = 0.5;
		float MisWeight = 1.0;
		if (RandSample < SkyLightSamplingStrategyPdf)
		{
			GenerateSkyLightOcclusionRay(WorldPosition, WorldNormal, RandSequence, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
			MisWeight = RayPdf / (SkyLightSamplingStrategyPdf * RayPdf + (1.0 - SkyLightSamplingStrategyPdf) * PdfLambertOcclusionRay(WorldNormal, Ray.Direction));
		}
		else
		{
			GenerateLambertOcclusionRay(WorldPosition, WorldNormal, RandSequence, Ray.Origin, Ray.Direction, Ray.TMin, Ray.TMax, RayPdf);
			MisWeight = RayPdf / ((1.0 - SkyLightSamplingStrategyPdf) * RayPdf + SkyLightSamplingStrategyPdf * PdfSkyLightOcclusionRay(WorldNormal, Ray.Direction));
		}
		
		// Surface-normal culling
		float NoL = dot(WorldNormal, Ray.Direction);
		if (RayPdf <= 0.0 || NoL <= 0.0)
		{
			continue;
		}

		uint RayFlags = 0
			| RAY_FLAG_FORCE_OPAQUE; // #dxr_todo: generate a special shader permutation for occlusion ray tracing that includes any-hit shaders for masked geometry
		FDefaultPayload Payload = (FDefaultPayload)0;

		TraceRay(
			TLAS,      // AccelerationStructure
			RayFlags,
			0xFF,      // InstanceInclusionMask
			0,         // RayContributionToHitGroupIndex
			1,         // MultiplierForGeometryContributionToShaderIndex
			0,         // MissShaderIndex
			Ray,       // RayDesc
			Payload    // Payload
		);

		if (Payload.HitT >= 0.0)
		{
			RayDistance += Payload.HitT;
			HitCount += 1.0;
		}
		else
		{
			float3 IncomingRadiance = EvalSkyLight(Ray.Direction);

			BxDFContext Context;
			half3 N = WorldNormal;
			half3 V = -CameraDirection;
			half3 L = Ray.Direction;
			Init(Context, N, V, L);

			uint ShadingModelID = ScreenSpaceData.GBuffer.ShadingModelID;
			float3 Diffuse = 0.0;
			float3 Specular = 0.0;
			float3 Transmission = 0.0;
			switch (ShadingModelID)
			{
				case SHADINGMODELID_DEFAULT_LIT:
				{
					Diffuse = Diffuse_Lambert(DiffuseColor);
					float a2 = Pow4(Roughness);
					float D = D_GGX(a2, Context.NoH);
					float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
					float3 F = F_Schlick(SpecularColor, Context.VoH);
					Specular = (D * Vis) * F;

					break;
				}
				case SHADINGMODELID_CLOTH:
				{
					const float3 FuzzColor = saturate(GBuffer.CustomData.rgb);
					const float  Cloth = saturate(GBuffer.CustomData.a);
					float a2 = Pow4(Roughness);
					float3 Specular0 = 0.0;
					{
						float D = D_GGX(a2, Context.NoH);
						float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
						float3 F = F_Schlick(SpecularColor, Context.VoH);
						Specular0 = (D * Vis) * F;
					}

					float3 Specular1 = 0.0;
					{
						float D = D_InvGGX(a2, Context.NoH);
						float Vis = Vis_Cloth(Context.NoV, NoL);
						float3 F = F_Schlick(FuzzColor, Context.VoH);
						Specular1 = (D * Vis) * F;
					}

					Diffuse = Diffuse_Lambert(DiffuseColor);
					Specular = lerp(Specular0, Specular1, Cloth);
					break;
				}
				case SHADINGMODELID_SUBSURFACE_PROFILE:
				{
					float AverageToRoughness0;
					float AverageToRoughness1;
					float LobeMix;
					GetProfileDualSpecular(GBuffer, AverageToRoughness0, AverageToRoughness1, LobeMix);

					float AverageRoughness = Roughness;
					float Lobe0Roughness = max(saturate(AverageRoughness * AverageToRoughness0), 0.02f);
					float Lobe1Roughness = saturate(AverageRoughness * AverageToRoughness1);

					float Opacity = GBuffer.CustomData.a;
					Lobe0Roughness = lerp(1.0f, Lobe0Roughness, saturate(Opacity * 10.0f));
					Lobe1Roughness = lerp(1.0f, Lobe1Roughness, saturate(Opacity * 10.0f));
					Diffuse = Diffuse_Burley(DiffuseColor, Roughness, Context.NoV, NoL, Context.VoH);

					// DualSpecular GGX
					float AverageAlpha2 = Pow4(AverageRoughness);
					float Lobe0Alpha2 = Pow4(Lobe0Roughness);
					float Lobe1Alpha2 = Pow4(Lobe1Roughness);
					float D = lerp(D_GGX(Lobe0Alpha2, Context.NoH), D_GGX(Lobe1Alpha2, Context.NoH), LobeMix);
					float Vis = Vis_SmithJointApprox(AverageAlpha2, Context.NoV, NoL); // Average visibility well approximates using two separate ones (one per lobe).
					float3 F = F_Schlick(SpecularColor, Context.VoH);
					Specular = (D * Vis) * F;

					// Application of transmission profile
					float Thickness = 1.0;
					Thickness = DecodeThickness(Thickness);
					Thickness *= SSSS_MAX_TRANSMISSION_PROFILE_DISTANCE;
					FTransmissionProfileParams TransmissionParams = GetTransmissionProfileParams(GBuffer);
					float3 Profile = GetTransmissionProfile(GBuffer, Thickness).rgb;

					float3 RefractV = refract(V, -N, TransmissionParams.OneOverIOR);
					float PhaseFunction = ApproximateHG(dot(-L, RefractV), TransmissionParams.ScatteringDistribution);
					Transmission = Diffuse * Profile * PhaseFunction;

					break;
				}
				case SHADINGMODELID_SUBSURFACE:
				{
					Diffuse = Diffuse_Lambert(DiffuseColor);
					float a2 = Pow4(Roughness);
					float D = D_GGX(a2, Context.NoH);
					float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
					float3 F = F_Schlick(SpecularColor, Context.VoH);
					Specular = (D * Vis) * F;

					float3 SubsurfaceColor = ExtractSubsurfaceColor(ScreenSpaceData.GBuffer);
					float Opacity = ScreenSpaceData.GBuffer.CustomData.a;
					float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity); 
					float NormalContribution = saturate(Context.NoH * Opacity + 1 - Opacity);
					float BackScatter = ScreenSpaceData.GBuffer.GBufferAO * NormalContribution / (PI * 2.0);
					Transmission = SubsurfaceColor * lerp(BackScatter, 1, InScatter);

					break;
				}
				case MATERIAL_SHADINGMODEL_PREINTEGRATED_SKIN:
				{
					// Default GGX
					Diffuse = Diffuse_Lambert(DiffuseColor);
					float a2 = Pow4(Roughness);
					float D = D_GGX(a2, Context.NoH);
					float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);
					float3 F = F_Schlick(SpecularColor, Context.VoH);
					Specular = (D * Vis) * F;

					float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
					float Opacity = GBuffer.CustomData.a;

					float3 PreintegratedBRDF = Texture2DSampleLevel(View.PreIntegratedBRDF, View.PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
					Transmission = PreintegratedBRDF * SubsurfaceColor;
					break;
				}
				// Unsupported materials will render magenta
				default:
				case SHADINGMODELID_EYE:
				case SHADINGMODELID_HAIR:
				case SHADINGMODELID_CLEAR_COAT:
				case SHADINGMODELID_TWOSIDED_FOLIAGE:
				{
					Diffuse = float3(1, 0, 1);
				}
				break;
			}

			// #dxr_todo: Determine best way to incorporate integrals:
			// 1) Return combined contribution (current method)
			// 2) Split the integral (defer specular contribution to another pass)
			// 3) Store diffuse and specular contribution separately
			float3 Irradiance = IncomingRadiance * NoL * MisWeight / RayPdf;
			float3 Brdf = Diffuse + Transmission + Specular;
			//float3 Brdf = Diffuse + Transmission;
			ExitantRadiance += Irradiance * Brdf;
			DiffuseExitantRadiance += Irradiance * (Diffuse + Transmission);
		}
	}

	if (SamplesPerPixel > 0)
	{
		float SamplesPerPixelInv = rcp(SamplesPerPixel);
		ExitantRadiance *= SamplesPerPixelInv;
		DiffuseExitantRadiance *= SamplesPerPixelInv;
	}

	RWOcclusionMaskUAV[PixelCoord] = float4(ExitantRadiance, Luminance(DiffuseExitantRadiance));

	if (HitCount > 0.0)
	{
		RWRayDistanceUAV[PixelCoord] = RayDistance / HitCount;
	}
	else
	{
		RWRayDistanceUAV[PixelCoord] = 1.0e27;
	}
}