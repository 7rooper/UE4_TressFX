//
// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

//Unreal Engine 4 integration written by Leon Rosengarten and Jacob Kostenick 2019

#include "TressFXShortCutCommon.ush"
#include "DeferredShadingCommon.ush"

Texture2DArray<uint> FragmentDepthsTexture;


#ifndef WRITE_CLOSEST_DEPTH
	#define WRITE_CLOSEST_DEPTH 0
#endif

#if WRITE_CLOSEST_DEPTH
	Texture2D<float> tAccumInvAlpha;
#endif

#ifndef WRITE_GBUFFER_SHADING_MODEL
	#define WRITE_GBUFFER_SHADING_MODEL 0
#endif

#if WRITE_GBUFFER_SHADING_MODEL && WRITE_CLOSEST_DEPTH
	RWTexture2D<float4> RWGBufferB : register(u1);
#endif

// Second pass of ShortCut.
// Full-screen pass that writes the farthest of the near depths for depth culling.
void main(
	FScreenVertexOutput input, 
	out float OutDepth : SV_DEPTH
)
{
    const int2 vScreenAddress = int2(input.Position.xy);

	#if WRITE_CLOSEST_DEPTH
		float fInvAlpha = tAccumInvAlpha[uint2(input.Position.xy)];
		float fAlpha = saturate(1.0 - fInvAlpha);

		if (fAlpha < TRESSFX_MIN_ALPHA_FOR_SCENE_DEPTH)
		{
			OutDepth = 0;
			discard;
			return;
		}
		
		#if WRITE_GBUFFER_SHADING_MODEL
			// we need to know if a pixel is non-opaque tressfx, but without actually writing the shading model to the gbuffer			
			float4 Current = RWGBufferB[uint2(input.Position.xy)];
			uint CurrentMask = DecodeSelectiveOutputMask(Current.a);
			uint CurrentShadingModel = DecodeShadingModelId(Current.a);
			CurrentMask |= IS_TRESSFX_NON_OPAQUE_PIXEL;
			Current.a = EncodeShadingModelIdAndSelectiveOutputMask((uint) CurrentShadingModel, (uint) CurrentMask); 
			RWGBufferB[uint2(input.Position.xy)] = Current;
		#endif

		float HairDepth = asfloat(FragmentDepthsTexture[uint3(vScreenAddress, 0)]);
	#else
		// Write farthest depth value for culling in the next pass.
		float HairDepth = asfloat(FragmentDepthsTexture[uint3(vScreenAddress, 2)]);
	#endif

    float SceneDepth = SceneTexturesStruct.SceneDepthTexture[uint2(vScreenAddress)].r;
    OutDepth = max(HairDepth, SceneDepth);

}
