//
// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

//Unreal Engine 4 integration written by Leon Rosengarten and Jacob Kostenick 2019

#pragma once
#include "TressFXShortCutCommon.ush"
#include "VelocityCommon.ush"


#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"


#include "TressFXRendering.ush"

RWTexture2DArray<uint> RWFragmentDepthsTexture;

struct PS_INPUT_HAIR_AA
{
    float4 Position : SV_POSITION;
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;

};

#ifndef OPTIONAL_IsFrontFace
	#define OPTIONAL_IsFrontFace
#endif

// First pass of ShortCut.
// Geometry pass that stores the 3 front fragment depths, and accumulates product of 1-alpha values in the render target.
EARLYDEPTHSTENCIL
void main(
	PS_INPUT_HAIR_AA input OPTIONAL_IsFrontFace
	,out float4 AccumInvAlpha : SV_Target0
#if NEEDS_VELOCITY
	,out float4 OutVelocity : SV_Target1
#endif
)
{

    float4 position = input.Position;
    ResolvedView = ResolveView();

	float4 p0p1 = input.FactoryInterpolants.p0p1;
	float4 Tangent = input.FactoryInterpolants.Tangent;

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(input.FactoryInterpolants, input.Position);
	FPixelMaterialInputs PixelMaterialInputs;

	#if USE_WORLD_POSITION_EXCLUDING_SHADER_OFFSETS
		{
			float4 ScreenPosition = SvPositionToResolvedScreenPosition(input.Position);
			float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(input.Position);
			CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, input.Position, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, BasePassInterpolants.PixelPositionExcludingWPO);
		}
	#else
		{
			float4 ScreenPosition = SvPositionToResolvedScreenPosition(input.Position);
			float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(input.Position);
			CalcMaterialParametersEx(MaterialParameters, PixelMaterialInputs, input.Position, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
		}
	#endif

    float2 viewport = ResolvedView.ViewSizeAndInvSize.xy;
    float2 NDC = MaterialParameters.ScreenPosition.xy / MaterialParameters.ScreenPosition.w;
    float coverage = ComputeCoverage(p0p1.xy, p0p1.zw, NDC, viewport);

#if NEEDS_VELOCITY
    float2 Velocity = Calculate2DVelocity(MaterialParameters.ScreenPosition, input.FactoryInterpolants.VelocityPrevScreenPosition);
    OutVelocity = float4(EncodeVelocityToTexture(Velocity), 0, 0);
#endif

    half Opacity = GetMaterialOpacity(PixelMaterialInputs);
    float alpha = coverage * Opacity;

    if (alpha < SHORTCUT_MIN_ALPHA)
    {
        AccumInvAlpha = 1.0;
        return;
    }

    int2 vScreenAddress = int2(position.xy);

    uint uDepth = asuint(position.z);
    uint uDepth0Prev, uDepth1Prev;

	// Min of depth 0 and input depth
	// Original value is uDepth0Prev
    InterlockedMax(RWFragmentDepthsTexture[uint3(vScreenAddress, 0)], uDepth, uDepth0Prev);

	// Min of depth 1 and greater of the last compare
	// If fragment opaque, always use input depth (don't need greater depths)
    uDepth = (alpha > 0.98) ? uDepth : min(uDepth, uDepth0Prev);

    InterlockedMax(RWFragmentDepthsTexture[uint3(vScreenAddress, 1)], uDepth, uDepth1Prev);

    uint uDepth2Prev;

	// Min of depth 2 and greater of the last compare
	// If fragment opaque, always use input depth (don't need greater depths)
    uDepth = (alpha > 0.98) ? uDepth : min(uDepth, uDepth1Prev);

    InterlockedMax(RWFragmentDepthsTexture[uint3(vScreenAddress, 2)], uDepth, uDepth2Prev);

    AccumInvAlpha = 1.0 - alpha;
}
