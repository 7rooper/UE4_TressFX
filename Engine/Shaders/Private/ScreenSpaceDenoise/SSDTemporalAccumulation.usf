// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

/*=============================================================================
	PostProcessTemporalAA.usf: Temporal AA
=============================================================================*/

#include "SSDCommon.ush"
#include "SSDSignalCore.ush"
#include "../TextureSampling.ush"


//------------------------------------------------------- CONFIGS

#define TILE_PIXEL_SIZE 8


#define CONFIG_SIGNAL_PROCESSING DIM_SIGNAL_PROCESSING


#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
	// Input and output layout.
	// TODO: Do SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL that does not store certainty for the history.
	#define CONFIG_SIGNAL_INPUT_LAYOUT   SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL
	#define CONFIG_SIGNAL_HISTORY_LAYOUT SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL

	// Uses a larger kernel when burteforcing to converge faster.
	#define CONFIG_LARGER_HISTORY_KERNEL 1

	// Input is from reduce pass that has been tile classified.
	#define CONFIG_INPUT_TILE_CLASSIFICATION 1

	// The work is control by tile classification to avoid doing useless mip levels.
	#define CONFIG_USE_TILE_CLASSIFICATION 1

	// Uses a rejection buffer at MIP 0 because is very unstable otherwise.
	#define CONFIG_USE_REJECTION_BUFFER (DIM_IS_MIP_0 == 1)
	#define CONFIG_SIGNAL_HISTORY_REJECTION_LAYOUT SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY_REJECTION

	// Uses a larger kernel when brute forcing to increase the speed of convergence by bluring more spatially.
	#define CONFIG_LARGE_HISTORY_KERNEL 1

	// Reject based on certainty of the mip level.
	#define CONFIG_CERTAINTY_BASED_REJECTION 1

#elif CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_REFLECTIONS
	// Input and output layout.
	#define CONFIG_SIGNAL_INPUT_LAYOUT   SIGNAL_BUFFER_LAYOUT_REFLECTIONS_INPUT
	#define CONFIG_SIGNAL_HISTORY_LAYOUT SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY

	#define CONFIG_HISTORY_REJECTION 2
	#define CONFIG_HISTORY_REJECTION_COLOR_SPACE 0

#else
	#error Unimplemented signal processing.
#endif


//------------------------------------------------------- CONFIG DISABLED DEFAULTS

/** Whether this pass make use of a tile classification. */
#ifndef CONFIG_USE_TILE_CLASSIFICATION
	#define CONFIG_USE_TILE_CLASSIFICATION 0
#endif

/** Whether this pass uses custom rejection buffer. */
#ifndef CONFIG_USE_REJECTION_BUFFER
	#define CONFIG_USE_REJECTION_BUFFER 0
	#define CONFIG_SIGNAL_HISTORY_REJECTION_LAYOUT CONFIG_SIGNAL_INPUT_LAYOUT
#endif

/** Whether this pass as a tile classified input. */
#ifndef CONFIG_INPUT_TILE_CLASSIFICATION
	#define CONFIG_INPUT_TILE_CLASSIFICATION 0
#endif

/** Uses a kernel that is larger to sample the history. */
#ifndef CONFIG_LARGE_HISTORY_KERNEL
	#define CONFIG_LARGE_HISTORY_KERNEL 0
#endif

/** Whether the history rejection should be taking into account the certainty. */
#ifndef CONFIG_CERTAINTY_BASED_REJECTION
	#define CONFIG_CERTAINTY_BASED_REJECTION 0
#endif

/** The color of the history should be rejected with. */
#ifndef CONFIG_HISTORY_REJECTION_COLOR_SPACE
	#define CONFIG_HISTORY_REJECTION_COLOR_SPACE 0
#endif

/** Whether should use a larger kernel to sample history. */
#ifndef CONFIG_LARGER_HISTORY_KERNEL
	#define CONFIG_LARGER_HISTORY_KERNEL 0
#endif


//------------------------------------------------------- CONFIG ENABLED DEFAULTS

/** Whether should do history rejection. */
#ifndef CONFIG_HISTORY_REJECTION
	#define CONFIG_HISTORY_REJECTION 1
#endif


//------------------------------------------------------- INCLUDES DEPENDINGS ON THE CONFIG

#include "SSDSignalInterface.ush"


//------------------------------------------------------- PARAMETERS

int bCameraCut;

#if DIM_IS_MIP_0
	static const uint iMipLevel = 0;
	static const uint iMipLevelPow2 = 1;
	static const float MipLevel = 0;
	static const float MipLevelPow2 = 1;
	static const float InvMipLevelPow2 = 1;
#else
	uint iMipLevel;
	uint iMipLevelPow2;
	float MipLevel;
	float MipLevelPow2; // pow(2, MipLevel)
	float InvMipLevelPow2; // pow(0.5, MipLevel)
#endif

Texture2D SignalInput0;
Texture2D SignalInput1;

float4x4  PrevScreenToTranslatedWorld;
Texture2D PrevHistory0;
Texture2D PrevHistory1;
Texture2D<uint> PrevTileClassificationTexture;
Texture2D PrevDepthBuffer;
Texture2D PrevGBufferA;
Texture2D PrevGBufferB;

Texture2D HistoryRejectionSignal0;
Texture2D HistoryRejectionSignal1;

RWTexture2D<float4>	SignalHistoryOutput0;
RWTexture2D<float4>	SignalHistoryOutput1;


//------------------------------------------------------- FUNCTIONS

FSSFSignalSample TransformSignalForPreRejection(FSSFSignalSample Sample)
{
	// Unpremultiplied RGBA to avoid any opacity mismatches.
	Sample.SceneColor.rgb *= SafeRcp(Sample.SceneColor.a);

	#if CONFIG_HISTORY_REJECTION_COLOR_SPACE == 1
		Sample.SceneColor.rgb = LinearRGB_2_LCoCg(Sample.SceneColor.rgb);
	#endif
	return Sample;
}

FSSFSignalSample TransformSignalForPostRejection(FSSFSignalSample Sample)
{
	#if CONFIG_HISTORY_REJECTION_COLOR_SPACE == 1
		Sample.SceneColor.rgb = LCoCg_2_LinearRGB(Sample.SceneColor.rgb);
	#endif

	// Premultiplied RGBA
	Sample.SceneColor.rgb *= Sample.SceneColor.a;
	return Sample;
}


/** Sample history using a point sampler. */
void PointSampleHistory(float2 ScreenPosition, float2 BufferUV, out FSSFSignalSample OutSample, out FSSFSampleSceneInfos OutMetadata)
{
	OutSample = SampleInputSignal(PrevHistory0, PrevHistory1, GlobalPointClampedSampler, CONFIG_SIGNAL_HISTORY_LAYOUT, BufferUV, MipLevel);
	
	// TODO: so what to do with mip level of these guys?
	float WorldSceneDepth = ConvertFromDeviceZ(PrevDepthBuffer.SampleLevel(GlobalPointClampedSampler, BufferUV, 0).r);
	float3 WorldNormal = DecodeNormal(PrevGBufferA.SampleLevel(GlobalPointClampedSampler, BufferUV, 0).rgb);
	float Roughness = PrevGBufferB.SampleLevel(GlobalPointClampedSampler, BufferUV, 0).b;

	OutMetadata = InitSampleSceneInfos(
		View.PrevScreenToTranslatedWorld,
		ScreenPosition, WorldSceneDepth, WorldNormal, Roughness);

	// TODO: PrevScreenToCurrentTranslatedWorld
	OutMetadata.TranslatedWorldPosition += -View.PrevPreViewTranslation.xyz + View.PreViewTranslation.xyz;
}

/** Temporally accumulate the input. */
void TemporallyAccumulate(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex,
	FSSFTileInfos TileInfos,
	const bool bBruteForce)
{
	// When brute forcing, reduce the number of samples trying to converge with to increase minimal histerisis and respond quicker to the heavy noise.
	const float TargetedSampleCount = bBruteForce ? (0.125 * TARGETED_SAMPLE_COUNT) : (16 * MipLevelPow2 * MipLevelPow2);
	//const float TargetedSampleCount = bBruteForce ? (0.125 * TARGETED_SAMPLE_COUNT) : TARGETED_SAMPLE_COUNT;

	// Find out scene buffer UV.
	float2 SceneBufferUV = ((DispatchThreadId + 0.5) * MipLevelPow2 + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}
	float2 ViewportUV = BufferUVToViewportUV(SceneBufferUV);
	float2 ScreenPosition = ViewportUVToScreenPos(ViewportUV);

	// Reproject to previous frame.
	float2 HistoryScreenPosition = ScreenPosition;
	if (1)
	{
		float DeviceZ = SceneDepthBuffer.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0).r;

		float4 ThisClip = float4(HistoryScreenPosition, DeviceZ, 1);
		float4 PrevClip = mul(ThisClip, View.ClipToPrevClip);
		float2 PrevScreen = PrevClip.xy / PrevClip.w;
		float2 Velocity = HistoryScreenPosition - PrevScreen;

		if (1)
		{
			float2 VelocityN = SceneVelocityBuffer.SampleLevel(GlobalPointClampedSampler, SceneBufferUV, 0).xy;
			bool DynamicN = VelocityN.x > 0.0;
			if (DynamicN)
			{
				Velocity = DecodeVelocityFromTexture(VelocityN);
			}
		}

		HistoryScreenPosition -= Velocity;
	}


	// Sample current frame data.
	FSSFSignalSample CurrentFrame = SampleInputSignal(SignalInput0, SignalInput1, GlobalPointClampedSampler, CONFIG_SIGNAL_INPUT_LAYOUT, SceneBufferUV, MipLevel);
	FSSFSampleSceneInfos CurrentSceneMetadata = FetchCurrentSceneInfos(ScreenPosition, SceneBufferUV); // TODO: MipLevel

	// Use the diameter, because that is the distance between two pixel.
	float PixelWorldBluringRadius = MipLevelPow2 * ComputePixelWorldRadius(CurrentSceneMetadata);
	float WorldBluringRadius = WorldBluringRadiusToBilateralWorldDistance(PixelWorldBluringRadius);

	// Sample the history buffer.
	FSSFSignalSample PreviousFrame = CreateSignalSample();
	{
		float2 HistoryBufferUV = HistoryScreenPosition * View.ScreenPositionScaleBias.xy + View.ScreenPositionScaleBias.wz;
		float2 ClampedHistoryBufferUV = clamp(HistoryBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
		bool bIsPreviousFrameOffscreen = bCameraCut || any(HistoryBufferUV != ClampedHistoryBufferUV);

		BRANCH
		if (!bIsPreviousFrameOffscreen)
		{
			FBilinearSampleInfos BilinearInfos = GetBilinearSampleLevelInfosEx(
				HistoryBufferUV,
				View.BufferSizeAndInvSize.xy,
				View.BufferSizeAndInvSize.zw,
				MipLevelPow2, rcp(MipLevelPow2));

			// Number of sample to use.
			#if CONFIG_LARGER_HISTORY_KERNEL == 0
				const bool bUseLargerTAAKernel = false;
			#elif CONFIG_LARGER_HISTORY_KERNEL == 1
				const bool bUseLargerTAAKernel = bBruteForce;
			#endif
			const uint SampleCount = bUseLargerTAAKernel ? 16 : 4;

			// Disabled because it is useful to count the sample we add together when brute forcing,
			// so can converge faster the history.
			// TODO: kill it.
			float KernelWeight = 1;
			if (bUseLargerTAAKernel)
			{
				KernelWeight = 0;

				UNROLL
				for (uint i = 0; i < SampleCount; i++)
				{
					float2 SampleOffset = float2(float(i % 4) - 1, float(i / 4) - 1);
					KernelWeight += exp(-length2(SampleOffset - BilinearInfos.BilinearInterp));
				}
			}

			// bilateral kernel of the history.
			UNROLL
			for (uint i = 0; i < SampleCount; i++)
			{
				float2 SampleOffset;
				if (bUseLargerTAAKernel)
				{
					SampleOffset = float2(float(i % 4) - 1, float(i / 4) - 1);
				}
				else
				{
					SampleOffset = BilinearSamplingOffsets2x2[i];
				}

				// TODO: could be more ALU efficient for this.
				// TODO: -0.5 full res pixel to ensure always select the mip, regardless of mantissa precision?
				float2 SampleHistoryBufferUV = (BilinearInfos.TopLeftPixelCoord + (SampleOffset + 0.5)) * MipLevelPow2 * View.BufferSizeAndInvSize.zw;

				// Snap to closest pixel.
				//SampleHistoryBufferUV = SnapToClosestPixelCenterUVEx(
				//	SampleHistoryBufferUV,
				//	View.BufferSizeAndInvSize.xy, View.BufferSizeAndInvSize.zw,
				//	MipLevelPow2, rcp(MipLevelPow2));

				if (1)
				{
					if (any(SampleHistoryBufferUV != clamp(SampleHistoryBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw)))
					{
						continue;
					}
				}

				float2 SampleViewportUV = BufferUVToViewportUV(SampleHistoryBufferUV);
				float2 SampleScreenPosition = ViewportUVToScreenPos(SampleViewportUV);

				// Read tile information of then history.
				// TODO: can share a gather4 across all sampples.
				uint2 HistoryTilePos = uint2(SampleHistoryBufferUV * View.BufferSizeAndInvSize.xy * rcp(8));
				HistoryTilePos = (uint2(BilinearInfos.TopLeftPixelCoord + SampleOffset) * iMipLevelPow2) / 8;

				FSSFTileInfos HistoryTileInfos = DecodeTileInfos(
					PrevTileClassificationTexture[HistoryTilePos]);

				// Sample history.
				FSSFSignalSample HistorySample = GetConstantSignalSample(TILE_MODE_FULLY_INVALID);

				#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
				if (bBruteForce)
				{
					BRANCH
					if (HistoryTileInfos.TileMode == TILE_MODE_BRUTE_FORCE)
					{
						HistorySample = SampleInputSignal(
							PrevHistory0, PrevHistory1,
							GlobalPointClampedSampler,
							CONFIG_SIGNAL_HISTORY_LAYOUT,
							SampleHistoryBufferUV,
							/* MipLevel = */ 0);
					}
					else if (HistoryTileInfos.TileMode == TILE_MODE_FAST && 1) // TODO
					{
						HistorySample.AccumulatedSampleCount = 1.#INF;

						float PenumbraMask = 1;

						UNROLL
						for (uint i = 0; i < MAX_MIP_LEVEL_COUNT; i++)
						{
							BRANCH
							if (HistoryTileInfos.bProcessMipLevel[i])
							{
								// May need to sample all mip levels?
								FSSFSignalSample HistoryLayerSample = SampleInputSignal(
									PrevHistory0, PrevHistory1,
									GlobalPointClampedSampler,
									CONFIG_SIGNAL_HISTORY_LAYOUT,
									SampleHistoryBufferUV,
									i);

								HistorySample.AccumulatedSampleCount = min(
									HistorySample.AccumulatedSampleCount,
									HistoryLayerSample.AccumulatedSampleCount);
								PenumbraMask *= GetSamplePenumbraSafe(HistoryLayerSample);
							}
						}

						HistorySample.LeavingRayCount = PenumbraMask * HistorySample.AccumulatedSampleCount;
					}
					else if (
						HistoryTileInfos.TileMode == TILE_MODE_FULLY_LIGHTED ||
						HistoryTileInfos.TileMode == TILE_MODE_FULLY_OCCLUDED)
					{
						HistorySample = GetConstantSignalSample(HistoryTileInfos.TileMode);
					}
				}
				else // if (!bBruteForce)
				{
					BRANCH
					if (HistoryTileInfos.TileMode == TILE_MODE_BRUTE_FORCE && 1) // TODO.
					{
						HistorySample = CreateSignalSample();

						// TODO: this seriously needs to be optimised.
						for (uint x = 0; x < iMipLevelPow2; x++)
						for (uint y = 0; y < iMipLevelPow2; y++)
						{
							if (x != 0 || y != 0) continue;

							float2 SampleHistoryBufferUV2 = (BilinearInfos.TopLeftPixelCoord * MipLevelPow2 + (uint2(x, y) + 0.5)) * View.BufferSizeAndInvSize.zw;

							float2 SampleViewportUV2 = BufferUVToViewportUV(SampleHistoryBufferUV2);
							float2 SampleScreenPosition2 = ViewportUVToScreenPos(SampleViewportUV2);

							FSSFSignalSample HistorySample2 = SampleInputSignal(
								PrevHistory0, PrevHistory1,
								GlobalPointClampedSampler,
								CONFIG_SIGNAL_HISTORY_LAYOUT,
								SampleHistoryBufferUV2,
								/* MipLevel = */ 0);

							if (!(HistorySample2.AccumulatedSampleCount >= 0))
								continue;

							// Sample the meta data of the history sample.
							FSSFSampleSceneInfos HistoryMetadata2;
							{
								float WorldSceneDepth = ConvertFromDeviceZ(PrevDepthBuffer.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV2, 0).r);
								float3 WorldNormal = DecodeNormal(PrevGBufferA.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV2, 0).rgb);
								float Roughness = PrevGBufferB.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV2, 0).b;

								HistoryMetadata2 = InitSampleSceneInfos(
									View.PrevScreenToTranslatedWorld,
									SampleScreenPosition2, WorldSceneDepth, WorldNormal, Roughness);

								// TODO: PrevScreenToCurrentTranslatedWorld
								HistoryMetadata2.TranslatedWorldPosition += -View.PrevPreViewTranslation.xyz + View.PreViewTranslation.xyz;
							}

							// Ignores if history samples have more than targeted sample count.
							float SampleCountCorrectionWeight = min(1, TargetedSampleCount / HistorySample2.AccumulatedSampleCount);

							// Compute sample weight for accumultation.
							float BilateralWeight = ComputeBilateralWeight(
								WorldBluringRadius,
								CurrentSceneMetadata,
								HistoryMetadata2);

							HistorySample = Add(HistorySample, Mul(HistorySample2, SampleCountCorrectionWeight * BilateralWeight));
						}

						// TODO: no longer have ray hit distance, an artifact is generated here because applying a same PenumbraMask onto
						// multiple mip level that then get multiplied together and end up producing a output darker than it needs.
						if (1)
						{
							float Count = 0;
							for (uint k = 0; k < 4; k++)
							{
								Count += TileInfos.bProcessMipLevel[k] ? 1 : 0;
							}

							float Penumbra = GetSamplePenumbraSafe(HistorySample);
							float NewPenumbra = pow(Penumbra, rcp(Count));
							HistorySample.LeavingRayCount = HistorySample.AccumulatedSampleCount * NewPenumbra;
						}

						// Ignores if history samples have more than targeted sample count.
						float SampleCountCorrectionWeight = min(1, TargetedSampleCount / HistorySample.AccumulatedSampleCount);

						float BilinearWeight = GetSampleWeight(BilinearInfos, i);

						PreviousFrame = Add(PreviousFrame, Mul(HistorySample, SampleCountCorrectionWeight * BilinearWeight));


						continue;
					}
					else if (HistoryTileInfos.TileMode == TILE_MODE_FAST)
					{
						BRANCH
						if (HistoryTileInfos.bProcessMipLevel[iMipLevel])
						{
							// TODO: project in lobe space additionally.
							HistorySample = SampleInputSignal(
								PrevHistory0, PrevHistory1,
								GlobalPointClampedSampler,
								CONFIG_SIGNAL_HISTORY_LAYOUT,
								SampleHistoryBufferUV,
								MipLevel);
						}
					}
					else if (
						HistoryTileInfos.TileMode == TILE_MODE_FULLY_LIGHTED ||
						HistoryTileInfos.TileMode == TILE_MODE_FULLY_OCCLUDED)
					{
						HistorySample = Mul(GetConstantSignalSample(HistoryTileInfos.TileMode), MipLevelPow2 * MipLevelPow2);
					}
				} // if (!bBruteForce)
				#else // CONFIG_SIGNAL_PROCESSING != SIGNAL_PROCESSING_PENUMBRA
				{
					HistorySample = SampleInputSignal(
						PrevHistory0, PrevHistory1,
						GlobalPointClampedSampler,
						CONFIG_SIGNAL_HISTORY_LAYOUT,
						SampleHistoryBufferUV,
						/* MipLevel = */ 0);
				}
				#endif

				if (HistorySample.AccumulatedSampleCount > 0)
				{
					// Sample the meta data of the history sample.
					FSSFSampleSceneInfos HistoryMetadata;
					{
						float WorldSceneDepth = ConvertFromDeviceZ(PrevDepthBuffer.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV, 0).r);
						float3 WorldNormal = DecodeNormal(PrevGBufferA.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV, 0).rgb);
						float Roughness = PrevGBufferB.SampleLevel(GlobalPointClampedSampler, SampleHistoryBufferUV, 0).b;

						HistoryMetadata = InitSampleSceneInfos(
							View.PrevScreenToTranslatedWorld,
							SampleScreenPosition, WorldSceneDepth, WorldNormal, Roughness);

						// TODO: PrevScreenToCurrentTranslatedWorld
						HistoryMetadata.TranslatedWorldPosition += -View.PrevPreViewTranslation.xyz + View.PreViewTranslation.xyz;
					}

					// Ignores if history samples have more than targeted sample count.
					float SampleCountCorrectionWeight = min(1, TargetedSampleCount / HistorySample.AccumulatedSampleCount);

					// Compute sample weight for accumultation.
					float BilateralWeight = ComputeBilateralWeight(
						WorldBluringRadius,
						CurrentSceneMetadata,
						HistoryMetadata);

					float BilinearWeight = 1;
					if (bUseLargerTAAKernel)
					{
						// TODO: that is a lot of ALU.
						BilinearWeight = exp(-length2(SampleOffset - BilinearInfos.BilinearInterp));
					}
					else
					{
						BilinearWeight = GetSampleWeight(BilinearInfos, i);
					}

					float FinalWeight = BilateralWeight * BilinearWeight;

					PreviousFrame = Add(PreviousFrame, Mul(HistorySample, SampleCountCorrectionWeight * FinalWeight));
				}
			} // for (uint i = 0; i < SampleCount; i++)

			PreviousFrame = Mul(PreviousFrame, rcp(KernelWeight));
		} // if (!bIsPreviousFrameOffscreen)
	}
	
	FSSFSignalSample HistorySample = PreviousFrame;

	const bool bPostRejectionBlending = !bBruteForce; // || CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_REFLECTIONS;

	if (!bPostRejectionBlending)
	{
		float PreviousFrameWeight = min(HistorySample.AccumulatedSampleCount, TargetedSampleCount - CurrentFrame.AccumulatedSampleCount);
		float PreviousFrameMultiplier = HistorySample.AccumulatedSampleCount > 0 ? PreviousFrameWeight / HistorySample.AccumulatedSampleCount : 0;

		HistorySample = Add(Mul(HistorySample, PreviousFrameMultiplier), CurrentFrame);
	}

	// History rejection.
	#if CONFIG_HISTORY_REJECTION > 0
	BRANCH
	if (HistorySample.AccumulatedSampleCount > 0 && 1 || 1)
	{
		// Whether the history is rejected using rejection history signal.
		const bool bUsesHistoryRejectionSignal = CONFIG_USE_REJECTION_BUFFER;

		// Compile time size of the neighborhood to look for.
		int NeighborSize = 2; // TODO: based on anisotropy.
		#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
		{
			if (bBruteForce)
			{
				// Brute forcing, want to have very large clamping box.
				NeighborSize = bUsesHistoryRejectionSignal ? 3 : 4;
			}
			else if (bUsesHistoryRejectionSignal)
			{
				NeighborSize = 2;
			}
		}
		#else
		{
			NeighborSize = 3;
		}
		#endif

		// The minimum and maximum penumbra.
		FSSFSignalSample NeighborMin = CreateSignalSampleFromScalarValue(1.#INF);
		FSSFSignalSample NeighborMax = CreateSignalSampleFromScalarValue(0.0);

		float NeighborMomentWeight = 0;
		FSSFSignalSample NeighborMoment1 = CreateSignalSampleFromScalarValue(0.0);
		FSSFSignalSample NeighborMoment2 = CreateSignalSampleFromScalarValue(0.0);

		float NeighborMinPenumbra = 1.0;
		float NeighborMaxPenumbra = 0.0;

		const bool bUseCurrentSampleForCenter = bPostRejectionBlending;
		if (bUseCurrentSampleForCenter)
		{
			NeighborMinPenumbra = GetSamplePenumbraSafe(CurrentFrame);
			NeighborMaxPenumbra = GetSamplePenumbraSafe(CurrentFrame);

			FSSFSignalSample TransformedCurrentFrame = TransformSignalForPreRejection(NormalizeToOneSample(CurrentFrame));

			NeighborMin = TransformedCurrentFrame;
			NeighborMax = TransformedCurrentFrame;

			NeighborMomentWeight = 1;
			NeighborMoment1 = TransformedCurrentFrame;
			NeighborMoment2 = Power(TransformedCurrentFrame, 2.0);
		}

		// Look for neighborhood to build clamping box.
		LOOP for (int x = -NeighborSize; x <= NeighborSize; x++)
		LOOP for (int y = -NeighborSize; y <= NeighborSize; y++)
		{
			if (x == 0 && y == 0 && bUseCurrentSampleForCenter)
			{
				continue;
			}

			float2 SampleBufferUV = SceneBufferUV + (float2(x, y) * MipLevelPow2) * View.BufferSizeAndInvSize.zw;
			if (1)
			{
				if (any(SampleBufferUV != clamp(SampleBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw)))
				{
					continue;
				}
			}

			FSSFSignalSample NormalizedNeighborSample = CreateSignalSample();
			float NeighborPenumbra = -1;
			float NeighborUncertainty = 1.0;

			#if CONFIG_INPUT_TILE_CLASSIFICATION
			{
				FSSFTileInfos SampleTileInfos;

				// TODO: unless being lowest mip level, can reduce this to a gather4.
				SampleTileInfos = LoadTileInfos(uint2(floor(SampleBufferUV * View.BufferSizeAndInvSize.xy)) / 8);

				// Already know this sample will be invalid.
				if (SampleTileInfos.TileMode == TILE_MODE_FULLY_INVALID && 0) // TODO: enable
				{
					continue;
				}
				else if (SampleTileInfos.TileMode == TILE_MODE_FULLY_OCCLUDED && 0)
				{
					NeighborPenumbra = 0;
					NeighborUncertainty = 0.0;
				}
				else if (SampleTileInfos.TileMode == TILE_MODE_FULLY_LIGHTED && 0)
				{
					NeighborPenumbra = 1;
					NeighborUncertainty = 0.0;
				}
				else
				{
					bool bUseSample;
					if (bBruteForce)
					{
						bUseSample = SampleTileInfos.TileMode == TILE_MODE_BRUTE_FORCE;
					}
					else if (DIM_IS_MIP_0)
					{
						bUseSample = SampleTileInfos.TileMode != TILE_MODE_BRUTE_FORCE && SampleTileInfos.bProcessMipLevel[0];
					}
					else
					{
						bUseSample = SampleTileInfos.TileMode != TILE_MODE_BRUTE_FORCE && SampleTileInfos.bProcessMipLevel[iMipLevel];
					}

					FLATTEN
					if (bUseSample)
					{
						float2 SampleViewportUV = BufferUVToViewportUV(SampleBufferUV);
						float2 SampleScreenPosition = ViewportUVToScreenPos(SampleViewportUV);

						// Sample the neighor for history rejection.
						FSSFSignalSample Neighbor = SampleInputSignal(
							bUsesHistoryRejectionSignal ? HistoryRejectionSignal0 : SignalInput0,
							bUsesHistoryRejectionSignal ? HistoryRejectionSignal1 : SignalInput1,
							GlobalPointClampedSampler,
							bUsesHistoryRejectionSignal ? CONFIG_SIGNAL_HISTORY_REJECTION_LAYOUT : CONFIG_SIGNAL_INPUT_LAYOUT,
							SampleBufferUV, MipLevel);

						// Sample the meta data of the neighbor.	
						FSSFSampleSceneInfos NeighborSceneMetadata = FetchCurrentSceneInfos(SampleScreenPosition, SampleBufferUV);

						// TODO: needs to be done for TILE_MODE_FULLY_OCCLUDED and TILE_MODE_FULLY_LIGHTED
						float BilateralWeight = ComputeBilateralWeight(
							WorldBluringRadius,
							CurrentSceneMetadata,
							NeighborSceneMetadata);

						NormalizedNeighborSample = NormalizeToOneSample(Neighbor);

						if (BilateralWeight > 0 && Neighbor.AccumulatedSampleCount > 0)
						{
							NeighborPenumbra = GetSamplePenumbra(Neighbor);
							NeighborUncertainty = bUsesHistoryRejectionSignal
								? 0.0
								: Neighbor.UncertainRayCount / (Neighbor.AccumulatedSampleCount + Neighbor.UncertainRayCount);

							if (CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_REFLECTIONS)
							{
								NeighborUncertainty = 1 - NormalizedNeighborSample.SceneColor.a;
							}
						}
					} // if (bUseSample)
				}

			}
			#else // !CONFIG_INPUT_TILE_CLASSIFICATION
			{
				float2 SampleViewportUV = BufferUVToViewportUV(SampleBufferUV);
				float2 SampleScreenPosition = ViewportUVToScreenPos(SampleViewportUV);

				// Sample the neighor for history rejection.
				FSSFSignalSample Neighbor = SampleInputSignal(
					bUsesHistoryRejectionSignal ? HistoryRejectionSignal0 : SignalInput0,
					bUsesHistoryRejectionSignal ? HistoryRejectionSignal1 : SignalInput1,
					GlobalPointClampedSampler,
					bUsesHistoryRejectionSignal ? CONFIG_SIGNAL_HISTORY_REJECTION_LAYOUT : CONFIG_SIGNAL_INPUT_LAYOUT,
					SampleBufferUV, MipLevel);

				// Sample the meta data of the neighbor.	
				FSSFSampleSceneInfos NeighborSceneMetadata = FetchCurrentSceneInfos(SampleScreenPosition, SampleBufferUV);

				float BilateralWeight = ComputeBilateralWeight(
					WorldBluringRadius,
					CurrentSceneMetadata,
					NeighborSceneMetadata);

				if (BilateralWeight > 0 && Neighbor.AccumulatedSampleCount > 0)
				{
					NeighborPenumbra = GetSamplePenumbra(Neighbor);
					NeighborUncertainty = bUsesHistoryRejectionSignal
						? 0.0
						: Neighbor.UncertainRayCount / (Neighbor.AccumulatedSampleCount + Neighbor.UncertainRayCount);
				}

				NormalizedNeighborSample = NormalizeToOneSample(Neighbor);
			}
			#endif // !CONFIG_INPUT_TILE_CLASSIFICATION

			NormalizedNeighborSample = TransformSignalForPreRejection(NormalizedNeighborSample);

			if (CONFIG_CERTAINTY_BASED_REJECTION && NeighborUncertainty < 1.0)
			{
				NeighborMinPenumbra = min(NeighborMinPenumbra, NeighborPenumbra + NeighborUncertainty);
				NeighborMaxPenumbra = max(NeighborMaxPenumbra, NeighborPenumbra - NeighborUncertainty);
			}
			else if (NeighborUncertainty < 1.0)
			{
				NeighborMinPenumbra = min(NeighborMinPenumbra, NeighborPenumbra);
				NeighborMaxPenumbra = max(NeighborMaxPenumbra, NeighborPenumbra);
			}

			if (NeighborUncertainty < 1.0)
			{
				NeighborMin = Min(NeighborMin, NormalizedNeighborSample);
				NeighborMax = Max(NeighborMax, NormalizedNeighborSample);

				float Weight = 1;

				NeighborMomentWeight += Weight;
				NeighborMoment1 = Add(NeighborMoment1, Mul(NormalizedNeighborSample, Weight));
				NeighborMoment2 = Add(NeighborMoment2, Mul(Power(NormalizedNeighborSample, 2.0), Weight));
			}
		}

		NeighborMoment1 = Mul(NeighborMoment1, rcp(NeighborMomentWeight));
		NeighborMoment2 = Mul(NeighborMoment2, rcp(NeighborMomentWeight));

		// Clamp the history.
		#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
		{
			// The clamping box might be uncertain, in witch case we just take the middle.
			if (CONFIG_CERTAINTY_BASED_REJECTION && NeighborMinPenumbra > NeighborMaxPenumbra)
			{
				NeighborMaxPenumbra = NeighborMinPenumbra = (NeighborMinPenumbra + NeighborMaxPenumbra) * 0.5;
			}

			float HistoryPenumbra = GetSamplePenumbraSafe(HistorySample);
			float NewHistoryPenumbra = clamp(
				HistoryPenumbra, NeighborMinPenumbra, NeighborMaxPenumbra);

			float PreviousSampleCount = HistorySample.AccumulatedSampleCount;

			// Count the number of samples (hit or miss) that have been rejected by the clamp.
			float RejectedSampleCount = abs(NewHistoryPenumbra - HistoryPenumbra) * PreviousSampleCount;

			// Amend the previous frame with new sample count and clamped penumbra.
			HistorySample.AccumulatedSampleCount -= RejectedSampleCount;
			HistorySample.LeavingRayCount = HistorySample.AccumulatedSampleCount * NewHistoryPenumbra;
		}
		#elif CONFIG_HISTORY_REJECTION == 2
		{
			const float StdDevMultiplier = 1.25;

			// StdDev = sqrt(abs(NeighborSquareAvg - NeighborAvg * NeighborAvg));
			FSSFSignalSample StdDev = Sqrt(Abs(Subtract(NeighborMoment2, Power(NeighborMoment1, 2))));
			NeighborMin = Add(NeighborMoment1, Mul(StdDev, -StdDevMultiplier));
			NeighborMax = Add(NeighborMoment1, Mul(StdDev,  StdDevMultiplier));

			float RejectedSampleCount = 0;
			HistorySample = Mul(TransformSignalForPostRejection(Clamp(TransformSignalForPreRejection(NormalizeToOneSample(HistorySample)), NeighborMin, NeighborMax)), HistorySample.AccumulatedSampleCount - RejectedSampleCount);
		}
		#else // CONFIG_HISTORY_REJECTION == 1
		{
			float RejectedSampleCount = 0;
			HistorySample = Mul(TransformSignalForPostRejection(Clamp(TransformSignalForPreRejection(NormalizeToOneSample(HistorySample)), NeighborMin, NeighborMax)), HistorySample.AccumulatedSampleCount - RejectedSampleCount);
		}
		#endif
	}
	#endif // CONFIG_HISTORY_REJECTION > 0
	
	// Evaluate the final sample to output.
	if (bPostRejectionBlending)
	{
		float PreviousFrameWeight = min(HistorySample.AccumulatedSampleCount, TargetedSampleCount - CurrentFrame.AccumulatedSampleCount);
		float PreviousFrameMultiplier = HistorySample.AccumulatedSampleCount > 0 ? PreviousFrameWeight / HistorySample.AccumulatedSampleCount : 0;

		HistorySample = Add(Mul(HistorySample, PreviousFrameMultiplier), CurrentFrame);
	}

	if (all(DispatchThreadId < uint2(View.ViewSizeAndInvSize.xy)))
	{
		OutputSignal(SignalHistoryOutput0, SignalHistoryOutput1, CONFIG_SIGNAL_HISTORY_LAYOUT, DispatchThreadId, HistorySample);
	}
} // TemporallyAccumulate


//------------------------------------------------------- ENTRY POINT

[numthreads(TILE_PIXEL_SIZE, TILE_PIXEL_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
#if CONFIG_USE_TILE_CLASSIFICATION
{
	// TODO: tile classification.
	FSSFTileInfos TileInfos = LoadTileInfos((iMipLevelPow2 * DispatchThreadId) / TILE_PIXEL_SIZE);

	BRANCH
	if (TileInfos.TileMode == TILE_MODE_FULLY_OCCLUDED ||
		TileInfos.TileMode == TILE_MODE_FULLY_LIGHTED ||
		TileInfos.TileMode == TILE_MODE_FULLY_INVALID)
	{
		// NOP, brute force is only done at level 0.
		#if DEBUG_WASTFUL_OUTPUT
			FSSFSignalSample Final = GetConstantSignalSample(TileInfos.TileMode);
			OutputSignal(SignalHistoryOutput0, SignalHistoryOutput1, CONFIG_SIGNAL_HISTORY_LAYOUT, DispatchThreadId, Final);
		#endif
	}
	#if DIM_IS_MIP_0 // TODO: maybe early return on lower mip levels?
	else if (TileInfos.TileMode == TILE_MODE_BRUTE_FORCE)
	{
		TemporallyAccumulate(
			DispatchThreadId, GroupId, GroupThreadId, GroupThreadIndex,
			TileInfos,
			/* bBruteForce = */ true);
	}
	#else
	else if (TileInfos.TileMode == TILE_MODE_BRUTE_FORCE)
	{
		// NOP, brute force is only done at level 0.
		#if DEBUG_WASTFUL_OUTPUT
			FSSFSignalSample Final = GetConstantSignalSample(TILE_MODE_FULLY_INVALID);
			OutputSignal(SignalHistoryOutput0, SignalHistoryOutput1, CONFIG_SIGNAL_HISTORY_LAYOUT, DispatchThreadId, Final);
		#endif
	}
	#endif
	else if (TileInfos.bProcessMipLevel[iMipLevel]) // && TileInfos.TileMode == TILE_MODE_FAST)
	{
		TemporallyAccumulate(
			DispatchThreadId, GroupId, GroupThreadId, GroupThreadIndex,
			TileInfos,
			/* bBruteForce = */ false);
	}
	else
	{
		#if DEBUG_WASTFUL_OUTPUT
			FSSFSignalSample Final = GetConstantSignalSample(TILE_MODE_FULLY_INVALID);
			OutputSignal(SignalHistoryOutput0, SignalHistoryOutput1, CONFIG_SIGNAL_HISTORY_LAYOUT, DispatchThreadId, Final);
		#endif
	}
}
#else // !CONFIG_USE_TILE_CLASSIFICATION
{
	FSSFTileInfos TileInfos = CreateTileInfos();
	TemporallyAccumulate(
		DispatchThreadId, GroupId, GroupThreadId, GroupThreadIndex,
		TileInfos,
		/* bBruteForce = */ true);
}
#endif // !CONFIG_USE_TILE_CLASSIFICATION
