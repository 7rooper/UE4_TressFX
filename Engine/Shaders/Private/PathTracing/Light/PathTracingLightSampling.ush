// Copyright 1998-2018 Epic Games, Inc. All Rights Reserved.

/*=============================================================================================
LightSampling.usf: Light sampling for next-event estimation 
===============================================================================================*/

#pragma once

#include "PathTracingLightCommon.ush"
#include "PathTracingDirectionalLight.ush"
#include "PathTracingPointLight.ush"
#include "PathTracingRectLight.ush"
#include "PathTracingSkyLight.ush"

void GenerateLightRay(RayDesc Ray, int LightId, float3 LightUV, out RayDesc OutLightRay)
{
	if (IsPointLight(LightId))
	{
		PointLight_GenerateLightRay(Ray, LightId, LightUV, OutLightRay);
	}
	else if (IsDirectionalLight(LightId))
	{
		DirectionalLight_GenerateLightRay(Ray, LightId, LightUV, OutLightRay);
	}
	else if (IsEnvironmentLight(LightId))
	{
		SkyLight_GenerateLightRay(Ray, LightId, LightUV, OutLightRay);
	}
	else if (IsRectLight(LightId))
	{
		RectLight_GenerateLightRay(Ray, LightId, LightUV, OutLightRay);
	}
}

void PdfLight(
	RayDesc Ray,
	int LightId,
	float3 LightUV,
	out float OutPdf)
{
	// Light selection
	// TODO: Use radiance estimate instead of uniform random selection
	float LightSelectionPdf = 1.0 / SceneLightsData.Count;
	float LightPdf = 0.0;

	// Light sampling
	if (IsEnvironmentLight(LightId))
	{
		SkyLight_PdfLight(Ray, LightId, LightUV, LightPdf);
	}
	else if (IsPointLight(LightId))
	{
		PointLight_PdfLight(Ray, LightId, LightUV, LightPdf);
	}
	else if (IsDirectionalLight(LightId))
	{
		DirectionalLight_PdfLight(Ray, LightId, LightUV, LightPdf);
	}
	else if (IsRectLight(LightId))
	{
		RectLight_PdfLight(Ray, LightId, LightUV, LightPdf);
	}

	OutPdf = LightSelectionPdf * LightPdf;
}

void EvalLight(
	int LightId,
	float3 LightUV,
	RayDesc Ray,
	out float3 OutRadiance
)
{
	if (IsPointLight(LightId))
	{
		PointLight_EvalLight(LightId, LightUV, Ray, OutRadiance);
	}
	else if (IsEnvironmentLight(LightId))
	{
		SkyLight_EvalLight(LightId, LightUV, Ray, OutRadiance);
	}
	else if (IsDirectionalLight(LightId))
	{
		DirectionalLight_EvalLight(LightId, LightUV, Ray, OutRadiance);
	}
	else if (IsRectLight(LightId))
	{
		RectLight_EvalLight(LightId, LightUV, Ray,  OutRadiance);
	}
}

void SampleLight(
	RayDesc Ray,
	FMaterialClosestHitPayload Payload,
	float4 RandSample,
	out int OutLightId,
	out float3 OutLightUV,
	out float OutPdf)
{
	// Light selection
	// TODO: Use radiance estimate instead of uniform random selection
	OutLightId = RandSample.x * SceneLightsData.Count;
	float LightSelectionPdf = 1.0 / SceneLightsData.Count;

	// Light sampling
	OutLightUV = 0.0;
	float LightPdf = 0.0;
	if (IsPointLight(OutLightId))
	{
		PointLight_SampleLight(Ray, Payload, RandSample, OutLightId, OutLightUV, LightPdf);
	}
	else if (IsDirectionalLight(OutLightId))
	{
		DirectionalLight_SampleLight(Ray, Payload, RandSample, OutLightId, OutLightUV, LightPdf);
	}
	else if (IsEnvironmentLight(OutLightId))
	{
		SkyLight_SampleLight(Ray, Payload, RandSample, OutLightId, OutLightUV, LightPdf);
	}
	else if (IsRectLight(OutLightId))
	{
		RectLight_SampleLight(Ray, Payload, RandSample, OutLightId, OutLightUV, LightPdf);
	}

	OutPdf = LightSelectionPdf * LightPdf;
}