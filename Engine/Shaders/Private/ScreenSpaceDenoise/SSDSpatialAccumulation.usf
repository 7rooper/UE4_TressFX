// Copyright 1998-2019 Epic Games, Inc. All Rights Reserved.

#include "SSDDefinitions.ush"


//------------------------------------------------------- ENUM VALUES

/** Different possible stage for spatial accumulation. Matches  */
	#define STAGE_RECONSTRUCTION 0
	#define STAGE_REJECTION_PRE_CONVOLUTION 1
	#define STAGE_POST_FILTERING 2

/** Policy to use to change the size of kernel. */
	#define SAMPLE_COUNT_POLICY_DISABLED 0
	#define SAMPLE_COUNT_POLICY_METADATA_BASED 1
	#define SAMPLE_COUNT_POLICY_HIT_DISTANCE_BASED 2
	#define SAMPLE_COUNT_POLICY_ACCUMULATION_BASED 3
	#define SAMPLE_COUNT_POLICY_SAMPLE_ACCUMULATION_BASED 4

/** What signal should be outputed. */
	// Only output the sum of the signal 0.
	#define OUTPUT_MODE_SUM 0
	// Only output the sum of the momment 1 & 2 of the signal 0.
	#define OUTPUT_MODE_2MOMMENT_SUM 1


//------------------------------------------------------- CONFIGS

#define TILE_PIXEL_SIZE 8

#define CONFIG_SIGNAL_PROCESSING DIM_SIGNAL_PROCESSING
#define CONFIG_UPSCALE           DIM_UPSCALE


#if CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_PENUMBRA
	// Input and output layout.
	#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_PENUMBRA_INTERNAL
	#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_PENUMBRA_HISTORY_REJECTION

	#define CONFIG_VIEW_POSITION_BASED_BILATERAL 1

	#define CONFIG_SAMPLE_SET SAMPLE_SET_3X3

	#if DIM_STAGE == STAGE_POST_FILTERING
	#else
		#error Unexpected stage.
	#endif

#elif CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_REFLECTIONS
	#if DIM_STAGE == STAGE_RECONSTRUCTION
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_REFLECTIONS_INPUT
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY

		// Use stackowiak sample set to keep noise in the signal to avoid flicker in history rejection,
		// and adapt number of samples based on the sample.
		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS
		#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_HIT_DISTANCE_BASED

		// Reconstruction has 1 ray per input pixel, therefore can use specular ratio estimator instead of Tokoyashi axes bilateral kernel.
		#define CONFIG_SPECULAR_RATIO_ESTIMATOR 1

		// Uses tokoyashi lobe bilateral rejection to avoid mixing up significantly different lobes that can cause leaking/strong biasing.
		#define CONFIG_TOKOYASHI_LOBE_BILATERAL 1

		//#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_DISABLED

		// Do color accumulation with karis weighting to avoid flickering specular highlight to show up the kernel pattern.
		// TODO: This is a bit agressive.
		#define CONFIG_ACCUMULATION_COLOR_SPACE (COLOR_SPACE_RGB | COLOR_SPACE_KARIS_WEIGHTING)

	#elif DIM_STAGE == STAGE_REJECTION_PRE_CONVOLUTION
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_REFLECTIONS_REJECTION

		#define CONFIG_SAMPLE_SET           SAMPLE_SET_3X3_PLUS

		// Can only be done using tokoyashi because have more than one sample at a time.
		#define CONFIG_TOKOYASHI_LOBE_BILATERAL 1
		#define CONFIG_TOKOYASHI_AXES_BILATERAL 1

		// Normalize the input, because want to measure the spatial variance regardless of how many samples where used to reconstruct the signal.
		#define CONFIG_NORMALIZE_INPUT 1

		#define CONFIG_ACCUMULATION_COLOR_SPACE REFLECTIONS_REJECTION_COLOR_SPACE
		#define CONFIG_OUTPUT_COLOR_SPACE       REFLECTIONS_REJECTION_COLOR_SPACE

		// Output the 2 momment because history rejection is varaiance based, and may flicker with momment 2 loss since the pre
		// convolution will reduce the variance of momment 1.
		#define CONFIG_OUTPUT_MODE OUTPUT_MODE_2MOMMENT_SUM

	#elif DIM_STAGE == STAGE_POST_FILTERING
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_REFLECTIONS_HISTORY

		//#define CONFIG_SAMPLE_SET           SAMPLE_SET_3X3
		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS
		#define CONFIG_SAMPLE_SUBSET        1
		#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_ACCUMULATION_BASED
		//#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_DISABLED

		// Can only be done using tokoyashi because have more than one sample at a time.
		#define CONFIG_TOKOYASHI_LOBE_BILATERAL 1
		#define CONFIG_TOKOYASHI_AXES_BILATERAL 1

	#else
		#error Unexpected stage.
	#endif

#elif CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_AO
	#define CONFIG_VIEW_POSITION_BASED_BILATERAL 2
	#define CONFIG_NORMAL_BASED_BILATERAL 1

	#if DIM_STAGE == STAGE_RECONSTRUCTION
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_AO_INPUT
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_AO_HISTORY

		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS

	#elif DIM_STAGE == STAGE_POST_FILTERING
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_AO_HISTORY
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_AO_HISTORY

		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS
		#define CONFIG_SAMPLE_SUBSET        1

		#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_SAMPLE_ACCUMULATION_BASED

	#else
		#error Unexpected stage.
	#endif

#elif CONFIG_SIGNAL_PROCESSING == SIGNAL_PROCESSING_GI_AND_AO
	#define CONFIG_VIEW_POSITION_BASED_BILATERAL 2
	#define CONFIG_NORMAL_BASED_BILATERAL 1

	#if DIM_STAGE == STAGE_RECONSTRUCTION
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_GI_AND_AO_INPUT
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_GI_AND_AO_HISTORY

		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS

	#elif DIM_STAGE == STAGE_POST_FILTERING
		// Input and output layout.
		#define CONFIG_SIGNAL_INPUT_LAYOUT  SIGNAL_BUFFER_LAYOUT_GI_AND_AO_HISTORY
		#define CONFIG_SIGNAL_OUTPUT_LAYOUT SIGNAL_BUFFER_LAYOUT_GI_AND_AO_HISTORY

		#define CONFIG_SAMPLE_SET           SAMPLE_SET_STACKOWIAK_4_SETS
		#define CONFIG_SAMPLE_SUBSET        1

		#define CONFIG_SAMPLE_COUNT_POLICY  SAMPLE_COUNT_POLICY_SAMPLE_ACCUMULATION_BASED

	#else
		#error Unexpected stage.
	#endif

#else
	#error Unknown signal processing.
#endif


//------------------------------------------------------- CONFIG DISABLED DEFAULTS

/** Changes the logic controling the number of sample to do. */
#ifndef CONFIG_SAMPLE_COUNT_POLICY
	#define CONFIG_SAMPLE_COUNT_POLICY SAMPLE_COUNT_POLICY_DISABLED
#endif

/** Selects a subset of sample of a given CONFIG_SAMPLE_SET */
#ifndef CONFIG_SAMPLE_SUBSET
	#define CONFIG_SAMPLE_SUBSET 0
#endif

/** Whether the ray tracing input may needs to be upscale to the view's resolution. */
#ifndef CONFIG_UPSCALE
	#define CONFIG_UPSCALE 0
#endif

/** Color space of the input signal. */
#ifndef CONFIG_INPUT_COLOR_SPACE
	#define CONFIG_INPUT_COLOR_SPACE STANDARD_BUFFER_COLOR_SPACE
#endif

/** Color space to use for the accumulation. */
#ifndef CONFIG_ACCUMULATION_COLOR_SPACE
	#define CONFIG_ACCUMULATION_COLOR_SPACE STANDARD_BUFFER_COLOR_SPACE
#endif

/** Color space to output in the signal. */
#ifndef CONFIG_OUTPUT_COLOR_SPACE
	#define CONFIG_OUTPUT_COLOR_SPACE STANDARD_BUFFER_COLOR_SPACE
#endif

/** Removes the highest color. */
#ifndef CONFIG_REJECT_HIGHEST_COLOR
	#define CONFIG_REJECT_HIGHEST_COLOR 0
#endif

/** Whether the input signal should be normalized. */
#ifndef CONFIG_NORMALIZE_INPUT
	#define CONFIG_NORMALIZE_INPUT 0
#endif

/** The oupput mode that should be use. */
#ifndef CONFIG_OUTPUT_MODE
	#define CONFIG_OUTPUT_MODE OUTPUT_MODE_SUM
#endif


//------------------------------------------------------- INCLUDES

#include "SSDSignalFramework.ush"
#include "SSDSpatialKernel.ush"


//------------------------------------------------------- PARAMETERS

uint MaxSampleCount;
uint UpscaleFactor;

#if !CONFIG_UPSCALE && CONFIG_CUSTOM_SPREAD_FACTOR
	float KernelSpreadFactor;
#endif

Texture2D SignalInput0;
Texture2D SignalInput1;
Texture2D SignalInput2;

RWTexture2D<float4>	SignalOutput0;
RWTexture2D<float4>	SignalOutput1;
RWTexture2D<float4>	SignalOutput2;

RWTexture2D<float4>	DebugOutput;


//------------------------------------------------------- FUNCTIONS

// TODO: duplicated with reflection code.
uint2 GetPixelCoord(uint2 DispatchThreadId)
{
	uint UpscaleFactorPow2 = UpscaleFactor * UpscaleFactor;

	// TODO: find a way to not interfer with TAA's jittering.
	uint SubPixelId = View.StateFrameIndex & (UpscaleFactorPow2 - 1);

	return DispatchThreadId * UpscaleFactor + uint2(SubPixelId & (UpscaleFactor - 1), SubPixelId / UpscaleFactor);
}


//------------------------------------------------------- ENTRY POINTS

[numthreads(TILE_PIXEL_SIZE, TILE_PIXEL_SIZE, 1)]
void MainCS(
	uint2 DispatchThreadId : SV_DispatchThreadID,
	uint2 GroupId : SV_GroupID,
	uint2 GroupThreadId : SV_GroupThreadID,
	uint GroupThreadIndex : SV_GroupIndex)
{
	// Find out scene buffer UV.
	float2 SceneBufferUV = (DispatchThreadId + 0.5 + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
	if (true)
	{
		SceneBufferUV = clamp(SceneBufferUV, View.BufferBilinearUVMinMax.xy, View.BufferBilinearUVMinMax.zw);
	}
	
	// Read reference meta data.
	float2 ScreenPosition = ViewportUVToScreenPos(BufferUVToViewportUV(SceneBufferUV));
	FSSFSampleSceneInfos RefSceneMetadata = FetchCurrentSceneInfos(ScreenPosition, SceneBufferUV);

	// Sample the reference sample.
	#if !CONFIG_UPSCALE || 1 // TODO: this sample ends up being sampled twice when upscaling.
		FSSFSignalSample RefSample = SampleInputSignal(
			SignalInput0, SignalInput1, SignalInput2,
			GlobalPointClampedSampler,
			CONFIG_SIGNAL_INPUT_LAYOUT, SceneBufferUV);
	#endif

	/** factor by witch should be spread out. */
	#if CONFIG_UPSCALE
		float KernelSpreadFactor = UpscaleFactor;
	#elif !CONFIG_CUSTOM_SPREAD_FACTOR
		const float KernelSpreadFactor = 1;
	#endif

	/** Find out the number of samples that should be done. */
	float RequestedSampleCount = 1024;
	
	#if CONFIG_SAMPLE_SET == SAMPLE_SET_NONE
		RequestedSampleCount = 1;
	#elif CONFIG_SAMPLE_COUNT_POLICY == SAMPLE_COUNT_POLICY_DISABLED
		// NOP
	#elif CONFIG_SAMPLE_COUNT_POLICY == SAMPLE_COUNT_POLICY_METADATA_BASED
	{
		float RefBluringRadius = ComputeInfinityBluringRadius(RefSceneMetadata) * View.ViewSizeAndInvSize.x * rcp(KernelSpreadFactor);
		RequestedSampleCount = PI * RefBluringRadius * RefBluringRadius;
	}
	#elif CONFIG_SAMPLE_COUNT_POLICY == SAMPLE_COUNT_POLICY_HIT_DISTANCE_BASED
	{
		float RefBluringRadius = ComputeBluringRadiusOfNormalizedSample(RefSample, RefSceneMetadata) * View.ViewSizeAndInvSize.x * rcp(KernelSpreadFactor);
		RequestedSampleCount = PI * RefBluringRadius * RefBluringRadius;
	}
	#elif CONFIG_SAMPLE_COUNT_POLICY == SAMPLE_COUNT_POLICY_ACCUMULATION_BASED
	{
		// TOOD: use ComputeBluringRadiusOfNormalizedSample instead.
		float RefBluringRadius = ComputeInfinityBluringRadius(RefSceneMetadata) * View.ViewSizeAndInvSize.x * rcp(KernelSpreadFactor);
		float IdealSampleCount = PI * RefBluringRadius * RefBluringRadius;

		const float MaxSampleCount = 1024; // TODO.

		IdealSampleCount = min(IdealSampleCount, MaxSampleCount);

		RequestedSampleCount = IdealSampleCount / clamp(RefSample.AccumulatedSampleCount, 1, MaxSampleCount);
	}
	#elif CONFIG_SAMPLE_COUNT_POLICY == SAMPLE_COUNT_POLICY_SAMPLE_ACCUMULATION_BASED
	{
		const float IdealSampleCount = TARGETED_SAMPLE_COUNT;

		RequestedSampleCount = clamp(IdealSampleCount / RefSample.AccumulatedSampleCount, 1, MaxSampleCount);
	}
	#else
		#error Unknown policy to control the number of samples.
	#endif


	// Accumulate spatially the input.
	FSSDSignalAccumulator SignalAccumulator = CreateSignalAccumulator();
	{
		FSSDKernelConfig KernelConfig = CreateKernelConfig();
		KernelConfig.SampleSet = CONFIG_SAMPLE_SET;
		KernelConfig.SampleSubSetId = CONFIG_SAMPLE_SUBSET;
		KernelConfig.BufferLayout = CONFIG_SIGNAL_INPUT_LAYOUT;
		KernelConfig.bUnroll = CONFIG_SAMPLE_SET != SAMPLE_SET_STACKOWIAK_4_SETS;
		
		for (uint MultiplexId = 0; MultiplexId < MAX_SIGNAL_MULTIPLEXING; MultiplexId++)
		{
			KernelConfig.BufferColorSpace[MultiplexId] = CONFIG_INPUT_COLOR_SPACE;
			KernelConfig.AccumulatorColorSpace[MultiplexId] = CONFIG_ACCUMULATION_COLOR_SPACE;
			KernelConfig.bNormalizeSample[MultiplexId] = CONFIG_NORMALIZE_INPUT;
		}

		KernelConfig.BufferSizeAndInvSize = View.BufferSizeAndInvSize;
		KernelConfig.BufferBilinearUVMinMax = View.BufferBilinearUVMinMax;
		KernelConfig.KernelSpreadFactor = KernelSpreadFactor;

		KernelConfig.bForceKernelCenterAccumulation = true;
		KernelConfig.BufferUV = SceneBufferUV;
		KernelConfig.RefSceneMetadata = RefSceneMetadata;
		
		// When not upscaling, manually force accumulate the sample of the kernel.
		if (!CONFIG_UPSCALE)
		{
			const uint MultiplexId = 0;
			KernelConfig.bSampleKernelCenter = false;

			RefSample = TransformSignalSampleForAccumulation(
				KernelConfig, MultiplexId, RefSample);

			AccumulateSample(
				/* inout */ SignalAccumulator,
				MultiplexId,
				RefSample,
				/* FinalWeight = */ 1.0);
		}

		// When doing history rejection preconvolution may have invalid ref sample, in witch case need to force take neighborhood to have a clamping box.
		if (DIM_STAGE == STAGE_REJECTION_PRE_CONVOLUTION)
		{
			KernelConfig.bForceAllAccumulation = RefSample.AccumulatedSampleCount == 0;
			KernelConfig.SampleSet = SAMPLE_SET_3X3_PLUS;
		}

		if (CONFIG_SAMPLE_SET == SAMPLE_SET_STACKOWIAK_4_SETS)
		{
			KernelConfig.SampleCount = clamp(RequestedSampleCount * rcp(kStackowiakSampleSetCount), 1, MaxSampleCount);

			if (CONFIG_UPSCALE)
			{
				// TODO: could be optimised, but currently reusing same peace of code as reflection for maintainability.
				uint2 RayDispatchThreadId = (DispatchThreadId - UpscaleFactor / 2) / UpscaleFactor;
				uint2 ClosestRayPixelCoord = GetPixelCoord(RayDispatchThreadId);
			
				uint RaySubPixelId = View.StateFrameIndex & (UpscaleFactor * UpscaleFactor - 1);

				KernelConfig.BufferUV = ((ClosestRayPixelCoord + (0.5 * KernelSpreadFactor + 0.5)) + View.ViewRectMin.xy) * View.BufferSizeAndInvSize.zw;
			
				// Sample the center of the kernel by comparing it against the RefSceneMetadata, since it may no match.
				KernelConfig.bSampleKernelCenter = true;

				// Id of the pixel in the quad.
				KernelConfig.SampleTrackId = ((DispatchThreadId.x & 1) | ((DispatchThreadId.y & 1) << 1)) ^ 0x3;

				// To avoid precision problem when comparing potentially identicall 
				KernelConfig.bForceKernelCenterAccumulation = RaySubPixelId == ((DispatchThreadId.x & 1) | ((DispatchThreadId.y & 1) << 1));
			}
			else
			{
				// Put the kernel center at the center of the quad. Half pixel shift is done in the sample offsets.
				KernelConfig.BufferUV = (DispatchThreadId | 1) * View.BufferSizeAndInvSize.zw;

				// Id of the pixel in the quad. This is to match hard coded first samples of the sample set.
				KernelConfig.SampleTrackId = ((DispatchThreadId.x & 1) | ((DispatchThreadId.y & 1) << 1));
			}
		}

		AccumulateKernel(
			KernelConfig,
			SignalInput0,
			SignalInput1,
			SignalInput2,
			/* inout */ SignalAccumulator);
		
		//if (DIM_STAGE == STAGE_REJECTION_PRE_CONVOLUTION)
		//	DebugOutput[DispatchThreadId] = float4(
		//		KernelConfig.bForceAllAccumulation ? 1 : 0,
		//		0,
		//		0,
		//		0);

		// When doing history rejection pre convolution, could still have no information found with the 3x3 + kernel,
		// therefore dynamically complete to form an entire 3x3 convolution.
		BRANCH
		if (DIM_STAGE == STAGE_REJECTION_PRE_CONVOLUTION &&
			KernelConfig.SampleSet == SAMPLE_SET_3X3_PLUS &&
			KernelConfig.bForceAllAccumulation)
		{
			KernelConfig.SampleSet = SAMPLE_SET_3X3_CROSS;
			KernelConfig.bSampleKernelCenter = false;
			
			AccumulateKernel(
				KernelConfig,
				SignalInput0,
				SignalInput1,
				SignalInput2,
				/* inout */ SignalAccumulator);
		}
	}

	// Color processing of the signal to reduce highlight flickering.
	for (uint MultiplexId = 0; MultiplexId < MAX_SIGNAL_MULTIPLEXING; MultiplexId++)
	{
		#if CONFIG_REJECT_HIGHEST_COLOR
		if (Accumulator.Moment1[MultiplexId].AccumulatedSampleCount > 0)
		{
			const float MaxNeighborWeight = saturate(SignalAccumulator.Moment1[MultiplexId].AccumulatedSampleCount * rcp(10) - 1);

			SignalAccumulator.Moment1[MultiplexId].SceneColor.rgb =
				(SignalAccumulator.Moment1[MultiplexId].SceneColor.rgb - MaxNeighbor.SceneColor.rgb * MaxNeighborWeight) *
				(SignalAccumulator.Moment1[MultiplexId].AccumulatedSampleCount / (SignalAccumulator.Moment1[MultiplexId].AccumulatedSampleCount - MaxNeighborWeight));
		}
		#endif

		SignalAccumulator.Moment1[MultiplexId] = TransformSignal(
			SignalAccumulator.Moment1[MultiplexId], 
			/* SrcBasis  = */ CONFIG_ACCUMULATION_COLOR_SPACE, 
			/* DestBasis = */ CONFIG_OUTPUT_COLOR_SPACE);

		SignalAccumulator.Moment2[MultiplexId] = TransformSignal(
			SignalAccumulator.Moment2[MultiplexId], 
			/* SrcBasis  = */ CONFIG_ACCUMULATION_COLOR_SPACE, 
			/* DestBasis = */ CONFIG_OUTPUT_COLOR_SPACE);
	}

	// Transcode the spatial accumulation into multiplexed signal according to different modes.
	uint MultiplexCount = 1;
	FSSFSignalSample MultiplexedSamples[MAX_SIGNAL_MULTIPLEXING];
	{
		// Init samples to avoid unitialized warnings.
		for (uint i = 0; i < MAX_SIGNAL_MULTIPLEXING; i++)
			MultiplexedSamples[i] = CreateSignalSample();

		#if CONFIG_OUTPUT_MODE == OUTPUT_MODE_SUM
		{
			MultiplexedSamples[0] = SignalAccumulator.Moment1[0];
		}
		#elif CONFIG_OUTPUT_MODE == OUTPUT_MODE_2MOMMENT_SUM
		{
			MultiplexedSamples[0] = SignalAccumulator.Moment1[0];
			MultiplexedSamples[1] = SignalAccumulator.Moment2[0];
			MultiplexCount = 2;
		}
		#else
			#error Unknown output mode.
		#endif
	}

	// TODO:  LeaveRayCount = (LeaveRayCount - 1) * 9 / (9 - 2) post processing to reject when for history rejection

	OutputMultiplexedSignal(
		SignalOutput0, SignalOutput1, SignalOutput2,
		CONFIG_SIGNAL_OUTPUT_LAYOUT, MultiplexCount,
		DispatchThreadId, MultiplexedSamples);
} // MainCS
